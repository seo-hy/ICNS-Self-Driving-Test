
cart_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f08  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005090  08005090  00015090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000000  080050f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  8 .bss          00000264  2000008c  2000008c  0002008c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200002f0  200002f0  0002008c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000c922  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001ca8  00000000  00000000  0002c9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c40  00000000  00000000  0002e688  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b48  00000000  00000000  0002f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000054c4  00000000  00000000  0002fe10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003e6d  00000000  00000000  000352d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00039141  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003588  00000000  00000000  000391c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005078 	.word	0x08005078

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08005078 	.word	0x08005078

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b97a 	b.w	8000e08 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	468c      	mov	ip, r1
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	9e08      	ldr	r6, [sp, #32]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d151      	bne.n	8000be0 <__udivmoddi4+0xb4>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	d96d      	bls.n	8000c1e <__udivmoddi4+0xf2>
 8000b42:	fab2 fe82 	clz	lr, r2
 8000b46:	f1be 0f00 	cmp.w	lr, #0
 8000b4a:	d00b      	beq.n	8000b64 <__udivmoddi4+0x38>
 8000b4c:	f1ce 0c20 	rsb	ip, lr, #32
 8000b50:	fa01 f50e 	lsl.w	r5, r1, lr
 8000b54:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b58:	fa02 f70e 	lsl.w	r7, r2, lr
 8000b5c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000b60:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b64:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000b68:	0c25      	lsrs	r5, r4, #16
 8000b6a:	fbbc f8fa 	udiv	r8, ip, sl
 8000b6e:	fa1f f987 	uxth.w	r9, r7
 8000b72:	fb0a cc18 	mls	ip, sl, r8, ip
 8000b76:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000b7a:	fb08 f309 	mul.w	r3, r8, r9
 8000b7e:	42ab      	cmp	r3, r5
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x6c>
 8000b82:	19ed      	adds	r5, r5, r7
 8000b84:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b88:	f080 8123 	bcs.w	8000dd2 <__udivmoddi4+0x2a6>
 8000b8c:	42ab      	cmp	r3, r5
 8000b8e:	f240 8120 	bls.w	8000dd2 <__udivmoddi4+0x2a6>
 8000b92:	f1a8 0802 	sub.w	r8, r8, #2
 8000b96:	443d      	add	r5, r7
 8000b98:	1aed      	subs	r5, r5, r3
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ba0:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ba4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ba8:	fb00 f909 	mul.w	r9, r0, r9
 8000bac:	45a1      	cmp	r9, r4
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x98>
 8000bb0:	19e4      	adds	r4, r4, r7
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	f080 810a 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000bba:	45a1      	cmp	r9, r4
 8000bbc:	f240 8107 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	443c      	add	r4, r7
 8000bc4:	eba4 0409 	sub.w	r4, r4, r9
 8000bc8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2e00      	cmp	r6, #0
 8000bd0:	d061      	beq.n	8000c96 <__udivmoddi4+0x16a>
 8000bd2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	6034      	str	r4, [r6, #0]
 8000bda:	6073      	str	r3, [r6, #4]
 8000bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d907      	bls.n	8000bf4 <__udivmoddi4+0xc8>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d054      	beq.n	8000c92 <__udivmoddi4+0x166>
 8000be8:	2100      	movs	r1, #0
 8000bea:	e886 0021 	stmia.w	r6, {r0, r5}
 8000bee:	4608      	mov	r0, r1
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	fab3 f183 	clz	r1, r3
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	f040 808e 	bne.w	8000d1a <__udivmoddi4+0x1ee>
 8000bfe:	42ab      	cmp	r3, r5
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xdc>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80fa 	bhi.w	8000dfc <__udivmoddi4+0x2d0>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb65 0503 	sbc.w	r5, r5, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	46ac      	mov	ip, r5
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d03f      	beq.n	8000c96 <__udivmoddi4+0x16a>
 8000c16:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	b912      	cbnz	r2, 8000c26 <__udivmoddi4+0xfa>
 8000c20:	2701      	movs	r7, #1
 8000c22:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c26:	fab7 fe87 	clz	lr, r7
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d134      	bne.n	8000c9a <__udivmoddi4+0x16e>
 8000c30:	1beb      	subs	r3, r5, r7
 8000c32:	0c3a      	lsrs	r2, r7, #16
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	2101      	movs	r1, #1
 8000c3a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000c3e:	0c25      	lsrs	r5, r4, #16
 8000c40:	fb02 3318 	mls	r3, r2, r8, r3
 8000c44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c48:	fb0c f308 	mul.w	r3, ip, r8
 8000c4c:	42ab      	cmp	r3, r5
 8000c4e:	d907      	bls.n	8000c60 <__udivmoddi4+0x134>
 8000c50:	19ed      	adds	r5, r5, r7
 8000c52:	f108 30ff 	add.w	r0, r8, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x132>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	f200 80d1 	bhi.w	8000e00 <__udivmoddi4+0x2d4>
 8000c5e:	4680      	mov	r8, r0
 8000c60:	1aed      	subs	r5, r5, r3
 8000c62:	b2a3      	uxth	r3, r4
 8000c64:	fbb5 f0f2 	udiv	r0, r5, r2
 8000c68:	fb02 5510 	mls	r5, r2, r0, r5
 8000c6c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000c70:	fb0c fc00 	mul.w	ip, ip, r0
 8000c74:	45a4      	cmp	ip, r4
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x15c>
 8000c78:	19e4      	adds	r4, r4, r7
 8000c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x15a>
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	f200 80b8 	bhi.w	8000df6 <__udivmoddi4+0x2ca>
 8000c86:	4618      	mov	r0, r3
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c90:	e79d      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c92:	4631      	mov	r1, r6
 8000c94:	4630      	mov	r0, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	f1ce 0420 	rsb	r4, lr, #32
 8000c9e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000ca2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ca6:	fa20 f804 	lsr.w	r8, r0, r4
 8000caa:	0c3a      	lsrs	r2, r7, #16
 8000cac:	fa25 f404 	lsr.w	r4, r5, r4
 8000cb0:	ea48 0803 	orr.w	r8, r8, r3
 8000cb4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000cb8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000cbc:	fb02 4411 	mls	r4, r2, r1, r4
 8000cc0:	fa1f fc87 	uxth.w	ip, r7
 8000cc4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000cc8:	fb01 f30c 	mul.w	r3, r1, ip
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x1bc>
 8000cd4:	19ed      	adds	r5, r5, r7
 8000cd6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cda:	f080 808a 	bcs.w	8000df2 <__udivmoddi4+0x2c6>
 8000cde:	42ab      	cmp	r3, r5
 8000ce0:	f240 8087 	bls.w	8000df2 <__udivmoddi4+0x2c6>
 8000ce4:	3902      	subs	r1, #2
 8000ce6:	443d      	add	r5, r7
 8000ce8:	1aeb      	subs	r3, r5, r3
 8000cea:	fa1f f588 	uxth.w	r5, r8
 8000cee:	fbb3 f0f2 	udiv	r0, r3, r2
 8000cf2:	fb02 3310 	mls	r3, r2, r0, r3
 8000cf6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfa:	fb00 f30c 	mul.w	r3, r0, ip
 8000cfe:	42ab      	cmp	r3, r5
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x1e6>
 8000d02:	19ed      	adds	r5, r5, r7
 8000d04:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d08:	d26f      	bcs.n	8000dea <__udivmoddi4+0x2be>
 8000d0a:	42ab      	cmp	r3, r5
 8000d0c:	d96d      	bls.n	8000dea <__udivmoddi4+0x2be>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	443d      	add	r5, r7
 8000d12:	1aeb      	subs	r3, r5, r3
 8000d14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d18:	e78f      	b.n	8000c3a <__udivmoddi4+0x10e>
 8000d1a:	f1c1 0720 	rsb	r7, r1, #32
 8000d1e:	fa22 f807 	lsr.w	r8, r2, r7
 8000d22:	408b      	lsls	r3, r1
 8000d24:	fa05 f401 	lsl.w	r4, r5, r1
 8000d28:	ea48 0303 	orr.w	r3, r8, r3
 8000d2c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000d30:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000d34:	40fd      	lsrs	r5, r7
 8000d36:	ea4e 0e04 	orr.w	lr, lr, r4
 8000d3a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000d3e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000d42:	fb0c 5519 	mls	r5, ip, r9, r5
 8000d46:	fa1f f883 	uxth.w	r8, r3
 8000d4a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d4e:	fb09 f408 	mul.w	r4, r9, r8
 8000d52:	42ac      	cmp	r4, r5
 8000d54:	fa02 f201 	lsl.w	r2, r2, r1
 8000d58:	fa00 fa01 	lsl.w	sl, r0, r1
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x244>
 8000d5e:	18ed      	adds	r5, r5, r3
 8000d60:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d64:	d243      	bcs.n	8000dee <__udivmoddi4+0x2c2>
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	d941      	bls.n	8000dee <__udivmoddi4+0x2c2>
 8000d6a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d6e:	441d      	add	r5, r3
 8000d70:	1b2d      	subs	r5, r5, r4
 8000d72:	fa1f fe8e 	uxth.w	lr, lr
 8000d76:	fbb5 f0fc 	udiv	r0, r5, ip
 8000d7a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000d7e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000d82:	fb00 f808 	mul.w	r8, r0, r8
 8000d86:	45a0      	cmp	r8, r4
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x26e>
 8000d8a:	18e4      	adds	r4, r4, r3
 8000d8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d90:	d229      	bcs.n	8000de6 <__udivmoddi4+0x2ba>
 8000d92:	45a0      	cmp	r8, r4
 8000d94:	d927      	bls.n	8000de6 <__udivmoddi4+0x2ba>
 8000d96:	3802      	subs	r0, #2
 8000d98:	441c      	add	r4, r3
 8000d9a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d9e:	eba4 0408 	sub.w	r4, r4, r8
 8000da2:	fba0 8902 	umull	r8, r9, r0, r2
 8000da6:	454c      	cmp	r4, r9
 8000da8:	46c6      	mov	lr, r8
 8000daa:	464d      	mov	r5, r9
 8000dac:	d315      	bcc.n	8000dda <__udivmoddi4+0x2ae>
 8000dae:	d012      	beq.n	8000dd6 <__udivmoddi4+0x2aa>
 8000db0:	b156      	cbz	r6, 8000dc8 <__udivmoddi4+0x29c>
 8000db2:	ebba 030e 	subs.w	r3, sl, lr
 8000db6:	eb64 0405 	sbc.w	r4, r4, r5
 8000dba:	fa04 f707 	lsl.w	r7, r4, r7
 8000dbe:	40cb      	lsrs	r3, r1
 8000dc0:	431f      	orrs	r7, r3
 8000dc2:	40cc      	lsrs	r4, r1
 8000dc4:	6037      	str	r7, [r6, #0]
 8000dc6:	6074      	str	r4, [r6, #4]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	e6f8      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000dd2:	4690      	mov	r8, r2
 8000dd4:	e6e0      	b.n	8000b98 <__udivmoddi4+0x6c>
 8000dd6:	45c2      	cmp	sl, r8
 8000dd8:	d2ea      	bcs.n	8000db0 <__udivmoddi4+0x284>
 8000dda:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dde:	eb69 0503 	sbc.w	r5, r9, r3
 8000de2:	3801      	subs	r0, #1
 8000de4:	e7e4      	b.n	8000db0 <__udivmoddi4+0x284>
 8000de6:	4628      	mov	r0, r5
 8000de8:	e7d7      	b.n	8000d9a <__udivmoddi4+0x26e>
 8000dea:	4640      	mov	r0, r8
 8000dec:	e791      	b.n	8000d12 <__udivmoddi4+0x1e6>
 8000dee:	4681      	mov	r9, r0
 8000df0:	e7be      	b.n	8000d70 <__udivmoddi4+0x244>
 8000df2:	4601      	mov	r1, r0
 8000df4:	e778      	b.n	8000ce8 <__udivmoddi4+0x1bc>
 8000df6:	3802      	subs	r0, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	e745      	b.n	8000c88 <__udivmoddi4+0x15c>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xe6>
 8000e00:	f1a8 0802 	sub.w	r8, r8, #2
 8000e04:	443d      	add	r5, r7
 8000e06:	e72b      	b.n	8000c60 <__udivmoddi4+0x134>

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f94b 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f003 f9b2 	bl	80041a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f963 	bl	800113a <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f92b 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000020 	.word	0x20000020
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	20000000 	.word	0x20000000

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	200000ec 	.word	0x200000ec

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200000ec 	.word	0x200000ec

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_Delay+0x40>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	bf00      	nop
 8000f18:	f7ff ffde 	bl	8000ed8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad2      	subs	r2, r2, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3f7      	bcc.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000004 	.word	0x20000004

08000f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	4909      	ldr	r1, [pc, #36]	; (8000fd0 <__NVIC_EnableIRQ+0x38>)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	095b      	lsrs	r3, r3, #5
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	f002 021f 	and.w	r2, r2, #31
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	490d      	ldr	r1, [pc, #52]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	4909      	ldr	r1, [pc, #36]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	2201      	movs	r2, #1
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	1e5a      	subs	r2, r3, #1
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	401a      	ands	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106e:	2101      	movs	r1, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	1e59      	subs	r1, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff90 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff2b 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff40 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff90 	bl	8001028 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5f 	bl	8000fd4 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff33 	bl	8000f98 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d004      	beq.n	8001170 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e00c      	b.n	800118a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2205      	movs	r2, #5
 8001174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e16b      	b.n	800148c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 815a 	bne.w	8001486 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d00b      	beq.n	80011f2 <HAL_GPIO_Init+0x5a>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e6:	2b11      	cmp	r3, #17
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0xfc>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b12      	cmp	r3, #18
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80b4 	beq.w	8001486 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4a5f      	ldr	r2, [pc, #380]	; (80014a0 <HAL_GPIO_Init+0x308>)
 8001324:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <HAL_GPIO_Init+0x308>)
 8001326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <HAL_GPIO_Init+0x308>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	4a5a      	ldr	r2, [pc, #360]	; (80014a4 <HAL_GPIO_Init+0x30c>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <HAL_GPIO_Init+0x310>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d02b      	beq.n	80013be <HAL_GPIO_Init+0x226>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a50      	ldr	r2, [pc, #320]	; (80014ac <HAL_GPIO_Init+0x314>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d025      	beq.n	80013ba <HAL_GPIO_Init+0x222>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_GPIO_Init+0x318>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01f      	beq.n	80013b6 <HAL_GPIO_Init+0x21e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	; (80014b4 <HAL_GPIO_Init+0x31c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d019      	beq.n	80013b2 <HAL_GPIO_Init+0x21a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x216>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <HAL_GPIO_Init+0x324>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x212>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_GPIO_Init+0x328>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x20e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4a      	ldr	r2, [pc, #296]	; (80014c4 <HAL_GPIO_Init+0x32c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x20a>
 800139e:	2307      	movs	r3, #7
 80013a0:	e00e      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013a2:	2308      	movs	r3, #8
 80013a4:	e00c      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013a6:	2306      	movs	r3, #6
 80013a8:	e00a      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013aa:	2305      	movs	r3, #5
 80013ac:	e008      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013ae:	2304      	movs	r3, #4
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013be:	2300      	movs	r3, #0
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d0:	4934      	ldr	r1, [pc, #208]	; (80014a4 <HAL_GPIO_Init+0x30c>)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <HAL_GPIO_Init+0x330>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001402:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <HAL_GPIO_Init+0x330>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_GPIO_Init+0x330>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <HAL_GPIO_Init+0x330>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_GPIO_Init+0x330>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001456:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_GPIO_Init+0x330>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_GPIO_Init+0x330>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_GPIO_Init+0x330>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	f67f ae90 	bls.w	80011b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001494:	bf00      	nop
 8001496:	3724      	adds	r7, #36	; 0x24
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021c00 	.word	0x40021c00
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e25b      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d075      	beq.n	800160a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800151e:	4ba3      	ldr	r3, [pc, #652]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b04      	cmp	r3, #4
 8001528:	d00c      	beq.n	8001544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152a:	4ba0      	ldr	r3, [pc, #640]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001532:	2b08      	cmp	r3, #8
 8001534:	d112      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001536:	4b9d      	ldr	r3, [pc, #628]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001542:	d10b      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	4b99      	ldr	r3, [pc, #612]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d05b      	beq.n	8001608 <HAL_RCC_OscConfig+0x108>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d157      	bne.n	8001608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e236      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	d106      	bne.n	8001574 <HAL_RCC_OscConfig+0x74>
 8001566:	4a91      	ldr	r2, [pc, #580]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001568:	4b90      	ldr	r3, [pc, #576]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e01d      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x98>
 800157e:	4a8b      	ldr	r2, [pc, #556]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001580:	4b8a      	ldr	r3, [pc, #552]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4a88      	ldr	r2, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800158c:	4b87      	ldr	r3, [pc, #540]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001598:	4a84      	ldr	r2, [pc, #528]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800159a:	4b84      	ldr	r3, [pc, #528]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4a81      	ldr	r2, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc8e 	bl	8000ed8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fc8a 	bl	8000ed8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1fb      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0xc0>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc7a 	bl	8000ed8 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fc76 	bl	8000ed8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1e7      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0xe8>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d063      	beq.n	80016de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001616:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001622:	4b62      	ldr	r3, [pc, #392]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162a:	2b08      	cmp	r3, #8
 800162c:	d11c      	bne.n	8001668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162e:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d116      	bne.n	8001668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x152>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e1bb      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4956      	ldr	r1, [pc, #344]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001654:	4b55      	ldr	r3, [pc, #340]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	e03a      	b.n	80016de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001670:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <HAL_RCC_OscConfig+0x2b0>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fc2f 	bl	8000ed8 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff fc2b 	bl	8000ed8 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e19c      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	4b46      	ldr	r3, [pc, #280]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4943      	ldr	r1, [pc, #268]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800169e:	4b43      	ldr	r3, [pc, #268]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e015      	b.n	80016de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <HAL_RCC_OscConfig+0x2b0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc0e 	bl	8000ed8 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fc0a 	bl	8000ed8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e17b      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d030      	beq.n	800174c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d016      	beq.n	8001720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <HAL_RCC_OscConfig+0x2b4>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff fbee 	bl	8000ed8 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fbea 	bl	8000ed8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e15b      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x200>
 800171e:	e015      	b.n	800174c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0x2b4>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff fbd7 	bl	8000ed8 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172e:	f7ff fbd3 	bl	8000ed8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e144      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 80a0 	beq.w	800189a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10f      	bne.n	800178a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_RCC_OscConfig+0x2ac>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001786:	2301      	movs	r3, #1
 8001788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_OscConfig+0x2b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d121      	bne.n	80017da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_RCC_OscConfig+0x2b8>)
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <HAL_RCC_OscConfig+0x2b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017a2:	f7ff fb99 	bl	8000ed8 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a8:	e011      	b.n	80017ce <HAL_RCC_OscConfig+0x2ce>
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	42470000 	.word	0x42470000
 80017b4:	42470e80 	.word	0x42470e80
 80017b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017bc:	f7ff fb8c 	bl	8000ed8 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0fd      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_OscConfig+0x4d4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d106      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2f0>
 80017e2:	4a7d      	ldr	r2, [pc, #500]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 80017e4:	4b7c      	ldr	r3, [pc, #496]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6713      	str	r3, [r2, #112]	; 0x70
 80017ee:	e01c      	b.n	800182a <HAL_RCC_OscConfig+0x32a>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d10c      	bne.n	8001812 <HAL_RCC_OscConfig+0x312>
 80017f8:	4a77      	ldr	r2, [pc, #476]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 80017fa:	4b77      	ldr	r3, [pc, #476]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	f043 0304 	orr.w	r3, r3, #4
 8001802:	6713      	str	r3, [r2, #112]	; 0x70
 8001804:	4a74      	ldr	r2, [pc, #464]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001806:	4b74      	ldr	r3, [pc, #464]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6713      	str	r3, [r2, #112]	; 0x70
 8001810:	e00b      	b.n	800182a <HAL_RCC_OscConfig+0x32a>
 8001812:	4a71      	ldr	r2, [pc, #452]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001814:	4b70      	ldr	r3, [pc, #448]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	6713      	str	r3, [r2, #112]	; 0x70
 800181e:	4a6e      	ldr	r2, [pc, #440]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001820:	4b6d      	ldr	r3, [pc, #436]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	f023 0304 	bic.w	r3, r3, #4
 8001828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d015      	beq.n	800185e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff fb51 	bl	8000ed8 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff fb4d 	bl	8000ed8 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e0bc      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	4b61      	ldr	r3, [pc, #388]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0ee      	beq.n	800183a <HAL_RCC_OscConfig+0x33a>
 800185c:	e014      	b.n	8001888 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff fb3b 	bl	8000ed8 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff fb37 	bl	8000ed8 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0a6      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ee      	bne.n	8001866 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188e:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001890:	4b51      	ldr	r3, [pc, #324]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8092 	beq.w	80019c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d05c      	beq.n	800196a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d141      	bne.n	800193c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b48      	ldr	r3, [pc, #288]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7ff fb0b 	bl	8000ed8 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c6:	f7ff fb07 	bl	8000ed8 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e078      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d8:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018e4:	493c      	ldr	r1, [pc, #240]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	041b      	lsls	r3, r3, #16
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	4313      	orrs	r3, r2
 800190c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800190e:	4b33      	ldr	r3, [pc, #204]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001914:	f7ff fae0 	bl	8000ed8 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff fadc 	bl	8000ed8 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e04d      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x41c>
 800193a:	e045      	b.n	80019c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <HAL_RCC_OscConfig+0x4dc>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fac9 	bl	8000ed8 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff fac5 	bl	8000ed8 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e036      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x44a>
 8001968:	e02e      	b.n	80019c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e029      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <HAL_RCC_OscConfig+0x4d8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	429a      	cmp	r2, r3
 8001988:	d11c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d115      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d10d      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40007000 	.word	0x40007000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	42470060 	.word	0x42470060

080019e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0cc      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b68      	ldr	r3, [pc, #416]	; (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 020f 	and.w	r2, r3, #15
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d20c      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b63      	ldr	r3, [pc, #396]	; (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 020f 	and.w	r2, r3, #15
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0b8      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a34:	4a59      	ldr	r2, [pc, #356]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a4c:	4a53      	ldr	r2, [pc, #332]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4950      	ldr	r1, [pc, #320]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d044      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b47      	ldr	r3, [pc, #284]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d119      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e07f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e06f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e067      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001abe:	4937      	ldr	r1, [pc, #220]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 0203 	bic.w	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff fa02 	bl	8000ed8 <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f7ff f9fe 	bl	8000ed8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e04f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 020c 	and.w	r2, r3, #12
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1eb      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 020f 	and.w	r2, r3, #15
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d90c      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_ClockConfig+0x1b8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 020f 	and.w	r2, r3, #15
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e032      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b34:	4919      	ldr	r1, [pc, #100]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b52:	4912      	ldr	r1, [pc, #72]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b66:	f000 f821 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	5cd3      	ldrb	r3, [r2, r3]
 8001b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b7e:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b82:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f962 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	08005090 	.word	0x08005090
 8001ba4:	20000020 	.word	0x20000020
 8001ba8:	20000000 	.word	0x20000000

08001bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bb0:	b08f      	sub	sp, #60	; 0x3c
 8001bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb8:	2300      	movs	r3, #0
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc4:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 030c 	and.w	r3, r3, #12
 8001bcc:	2b04      	cmp	r3, #4
 8001bce:	d007      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f040 80b2 	bne.w	8001d3e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bda:	4b5e      	ldr	r3, [pc, #376]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001bde:	e0b1      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be0:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001be2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001be4:	e0ae      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be6:	4b5a      	ldr	r3, [pc, #360]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf0:	4b57      	ldr	r3, [pc, #348]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d04e      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfc:	4b54      	ldr	r3, [pc, #336]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	f04f 0400 	mov.w	r4, #0
 8001c06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	ea01 0103 	and.w	r1, r1, r3
 8001c12:	ea02 0204 	and.w	r2, r2, r4
 8001c16:	460b      	mov	r3, r1
 8001c18:	4614      	mov	r4, r2
 8001c1a:	0160      	lsls	r0, r4, #5
 8001c1c:	6278      	str	r0, [r7, #36]	; 0x24
 8001c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c20:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001c24:	6278      	str	r0, [r7, #36]	; 0x24
 8001c26:	015b      	lsls	r3, r3, #5
 8001c28:	623b      	str	r3, [r7, #32]
 8001c2a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001c2e:	1a5b      	subs	r3, r3, r1
 8001c30:	eb64 0402 	sbc.w	r4, r4, r2
 8001c34:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001c38:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001c3c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001c40:	ebb8 0803 	subs.w	r8, r8, r3
 8001c44:	eb69 0904 	sbc.w	r9, r9, r4
 8001c48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c60:	eb18 0801 	adds.w	r8, r8, r1
 8001c64:	eb49 0902 	adc.w	r9, r9, r2
 8001c68:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c80:	4640      	mov	r0, r8
 8001c82:	4649      	mov	r1, r9
 8001c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c86:	f04f 0400 	mov.w	r4, #0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	f7fe ff35 	bl	8000afc <__aeabi_uldivmod>
 8001c92:	4603      	mov	r3, r0
 8001c94:	460c      	mov	r4, r1
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
 8001c98:	e043      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9a:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	f04f 0400 	mov.w	r4, #0
 8001ca4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	ea01 0103 	and.w	r1, r1, r3
 8001cb0:	ea02 0204 	and.w	r2, r2, r4
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4614      	mov	r4, r2
 8001cb8:	0160      	lsls	r0, r4, #5
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ccc:	1a5b      	subs	r3, r3, r1
 8001cce:	eb64 0402 	sbc.w	r4, r4, r2
 8001cd2:	01a6      	lsls	r6, r4, #6
 8001cd4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001cd8:	019d      	lsls	r5, r3, #6
 8001cda:	1aed      	subs	r5, r5, r3
 8001cdc:	eb66 0604 	sbc.w	r6, r6, r4
 8001ce0:	00f3      	lsls	r3, r6, #3
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	00eb      	lsls	r3, r5, #3
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001cf4:	186d      	adds	r5, r5, r1
 8001cf6:	eb46 0602 	adc.w	r6, r6, r2
 8001cfa:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001cfe:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001d02:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001d06:	4655      	mov	r5, sl
 8001d08:	465e      	mov	r6, fp
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	4631      	mov	r1, r6
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	f04f 0400 	mov.w	r4, #0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4623      	mov	r3, r4
 8001d18:	f7fe fef0 	bl	8000afc <__aeabi_uldivmod>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	460c      	mov	r4, r1
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	0c1b      	lsrs	r3, r3, #16
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d3c:	e002      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	373c      	adds	r7, #60	; 0x3c
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d50:	40023800 	.word	0x40023800
 8001d54:	00f42400 	.word	0x00f42400
 8001d58:	007a1200 	.word	0x007a1200

08001d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000020 	.word	0x20000020

08001d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d78:	f7ff fff0 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001d7c:	4601      	mov	r1, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	0a9b      	lsrs	r3, r3, #10
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40023800 	.word	0x40023800
 8001d98:	080050a0 	.word	0x080050a0

08001d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001da0:	f7ff ffdc 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001da4:	4601      	mov	r1, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0b5b      	lsrs	r3, r3, #13
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	080050a0 	.word	0x080050a0

08001dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e01d      	b.n	8001e12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f002 fca6 	bl	800473c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f000 fc18 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	68d2      	ldr	r2, [r2, #12]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b06      	cmp	r3, #6
 8001e42:	d007      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6812      	ldr	r2, [r2, #0]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e01d      	b.n	8001eb0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f815 	bl	8001eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f000 fbc9 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	6839      	ldr	r1, [r7, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fe94 	bl	8002c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <HAL_TIM_PWM_Start+0x74>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_TIM_PWM_Start+0x2c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <HAL_TIM_PWM_Start+0x78>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_TIM_PWM_Start+0x30>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_TIM_PWM_Start+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6812      	ldr	r2, [r2, #0]
 8001f0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2b06      	cmp	r3, #6
 8001f22:	d007      	beq.n	8001f34 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e083      	b.n	8002064 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f002 fc1b 	bl	80047ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f8c:	f023 0307 	bic.w	r3, r3, #7
 8001f90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f000 fb4b 	bl	8002638 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001fe8:	f023 030c 	bic.w	r3, r3, #12
 8001fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4313      	orrs	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	011a      	lsls	r2, r3, #4
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	031b      	lsls	r3, r3, #12
 8002018:	4313      	orrs	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002026:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800202e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4313      	orrs	r3, r2
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_TIM_Encoder_Start+0x16>
 800207c:	2b04      	cmp	r3, #4
 800207e:	d008      	beq.n	8002092 <HAL_TIM_Encoder_Start+0x26>
 8002080:	e00f      	b.n	80020a2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fdbe 	bl	8002c0c <TIM_CCxChannelCmd>
      break;
 8002090:	e016      	b.n	80020c0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	2104      	movs	r1, #4
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fdb6 	bl	8002c0c <TIM_CCxChannelCmd>
      break;
 80020a0:	e00e      	b.n	80020c0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fdae 	bl	8002c0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2201      	movs	r2, #1
 80020b6:	2104      	movs	r1, #4
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fda7 	bl	8002c0c <TIM_CCxChannelCmd>
      break;
 80020be:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d122      	bne.n	8002136 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d11b      	bne.n	8002136 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f06f 0202 	mvn.w	r2, #2
 8002106:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fa6c 	bl	80025fa <HAL_TIM_IC_CaptureCallback>
 8002122:	e005      	b.n	8002130 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 fa5e 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fa6f 	bl	800260e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b04      	cmp	r3, #4
 8002142:	d122      	bne.n	800218a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d11b      	bne.n	800218a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f06f 0204 	mvn.w	r2, #4
 800215a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fa42 	bl	80025fa <HAL_TIM_IC_CaptureCallback>
 8002176:	e005      	b.n	8002184 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fa34 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fa45 	bl	800260e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	2b08      	cmp	r3, #8
 8002196:	d122      	bne.n	80021de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d11b      	bne.n	80021de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f06f 0208 	mvn.w	r2, #8
 80021ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2204      	movs	r2, #4
 80021b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fa18 	bl	80025fa <HAL_TIM_IC_CaptureCallback>
 80021ca:	e005      	b.n	80021d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fa0a 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fa1b 	bl	800260e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b10      	cmp	r3, #16
 80021ea:	d122      	bne.n	8002232 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d11b      	bne.n	8002232 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f06f 0210 	mvn.w	r2, #16
 8002202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2208      	movs	r2, #8
 8002208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f9ee 	bl	80025fa <HAL_TIM_IC_CaptureCallback>
 800221e:	e005      	b.n	800222c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f9e0 	bl	80025e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f9f1 	bl	800260e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d10e      	bne.n	800225e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d107      	bne.n	800225e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0201 	mvn.w	r2, #1
 8002256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f001 fcdd 	bl	8003c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d10e      	bne.n	800228a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	2b80      	cmp	r3, #128	; 0x80
 8002278:	d107      	bne.n	800228a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fdbf 	bl	8002e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d10e      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d107      	bne.n	80022b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9b6 	bl	8002622 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d10e      	bne.n	80022e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d107      	bne.n	80022e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f06f 0220 	mvn.w	r2, #32
 80022da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fd89 	bl	8002df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002302:	2302      	movs	r3, #2
 8002304:	e0b4      	b.n	8002470 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0c      	cmp	r3, #12
 800231a:	f200 809f 	bhi.w	800245c <HAL_TIM_PWM_ConfigChannel+0x170>
 800231e:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002359 	.word	0x08002359
 8002328:	0800245d 	.word	0x0800245d
 800232c:	0800245d 	.word	0x0800245d
 8002330:	0800245d 	.word	0x0800245d
 8002334:	08002399 	.word	0x08002399
 8002338:	0800245d 	.word	0x0800245d
 800233c:	0800245d 	.word	0x0800245d
 8002340:	0800245d 	.word	0x0800245d
 8002344:	080023db 	.word	0x080023db
 8002348:	0800245d 	.word	0x0800245d
 800234c:	0800245d 	.word	0x0800245d
 8002350:	0800245d 	.word	0x0800245d
 8002354:	0800241b 	.word	0x0800241b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fa0a 	bl	8002778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	6992      	ldr	r2, [r2, #24]
 800236e:	f042 0208 	orr.w	r2, r2, #8
 8002372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	6992      	ldr	r2, [r2, #24]
 800237e:	f022 0204 	bic.w	r2, r2, #4
 8002382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	6991      	ldr	r1, [r2, #24]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	6912      	ldr	r2, [r2, #16]
 8002392:	430a      	orrs	r2, r1
 8002394:	619a      	str	r2, [r3, #24]
      break;
 8002396:	e062      	b.n	800245e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 fa5a 	bl	8002858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	6992      	ldr	r2, [r2, #24]
 80023ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	6992      	ldr	r2, [r2, #24]
 80023be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	6991      	ldr	r1, [r2, #24]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	6912      	ldr	r2, [r2, #16]
 80023d2:	0212      	lsls	r2, r2, #8
 80023d4:	430a      	orrs	r2, r1
 80023d6:	619a      	str	r2, [r3, #24]
      break;
 80023d8:	e041      	b.n	800245e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 faaf 	bl	8002944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	69d2      	ldr	r2, [r2, #28]
 80023f0:	f042 0208 	orr.w	r2, r2, #8
 80023f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	69d2      	ldr	r2, [r2, #28]
 8002400:	f022 0204 	bic.w	r2, r2, #4
 8002404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	69d1      	ldr	r1, [r2, #28]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	6912      	ldr	r2, [r2, #16]
 8002414:	430a      	orrs	r2, r1
 8002416:	61da      	str	r2, [r3, #28]
      break;
 8002418:	e021      	b.n	800245e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fb03 	bl	8002a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	69d2      	ldr	r2, [r2, #28]
 8002430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	69d2      	ldr	r2, [r2, #28]
 8002440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	69d1      	ldr	r1, [r2, #28]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	6912      	ldr	r2, [r2, #16]
 8002454:	0212      	lsls	r2, r2, #8
 8002456:	430a      	orrs	r2, r1
 8002458:	61da      	str	r2, [r3, #28]
      break;
 800245a:	e000      	b.n	800245e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800245c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_TIM_ConfigClockSource+0x18>
 800248c:	2302      	movs	r3, #2
 800248e:	e0a6      	b.n	80025de <HAL_TIM_ConfigClockSource+0x166>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d067      	beq.n	8002598 <HAL_TIM_ConfigClockSource+0x120>
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d80b      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x6c>
 80024cc:	2b10      	cmp	r3, #16
 80024ce:	d073      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x140>
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d802      	bhi.n	80024da <HAL_TIM_ConfigClockSource+0x62>
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d06f      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024d8:	e078      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d06c      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x140>
 80024de:	2b30      	cmp	r3, #48	; 0x30
 80024e0:	d06a      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80024e2:	e073      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024e4:	2b70      	cmp	r3, #112	; 0x70
 80024e6:	d00d      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0x8c>
 80024e8:	2b70      	cmp	r3, #112	; 0x70
 80024ea:	d804      	bhi.n	80024f6 <HAL_TIM_ConfigClockSource+0x7e>
 80024ec:	2b50      	cmp	r3, #80	; 0x50
 80024ee:	d033      	beq.n	8002558 <HAL_TIM_ConfigClockSource+0xe0>
 80024f0:	2b60      	cmp	r3, #96	; 0x60
 80024f2:	d041      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80024f4:	e06a      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fa:	d066      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x152>
 80024fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002500:	d017      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002502:	e063      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f000 fb5a 	bl	8002bcc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002526:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	609a      	str	r2, [r3, #8]
      break;
 8002530:	e04c      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f000 fb43 	bl	8002bcc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	6892      	ldr	r2, [r2, #8]
 8002550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002554:	609a      	str	r2, [r3, #8]
      break;
 8002556:	e039      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	461a      	mov	r2, r3
 8002566:	f000 fab7 	bl	8002ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2150      	movs	r1, #80	; 0x50
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fb10 	bl	8002b96 <TIM_ITRx_SetConfig>
      break;
 8002576:	e029      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	461a      	mov	r2, r3
 8002586:	f000 fad6 	bl	8002b36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2160      	movs	r1, #96	; 0x60
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fb00 	bl	8002b96 <TIM_ITRx_SetConfig>
      break;
 8002596:	e019      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	461a      	mov	r2, r3
 80025a6:	f000 fa97 	bl	8002ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2140      	movs	r1, #64	; 0x40
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 faf0 	bl	8002b96 <TIM_ITRx_SetConfig>
      break;
 80025b6:	e009      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f000 fae7 	bl	8002b96 <TIM_ITRx_SetConfig>
      break;
 80025c8:	e000      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a40      	ldr	r2, [pc, #256]	; (800274c <TIM_Base_SetConfig+0x114>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d013      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002656:	d00f      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a3d      	ldr	r2, [pc, #244]	; (8002750 <TIM_Base_SetConfig+0x118>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00b      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <TIM_Base_SetConfig+0x11c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d007      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3b      	ldr	r2, [pc, #236]	; (8002758 <TIM_Base_SetConfig+0x120>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0x40>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3a      	ldr	r2, [pc, #232]	; (800275c <TIM_Base_SetConfig+0x124>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2f      	ldr	r2, [pc, #188]	; (800274c <TIM_Base_SetConfig+0x114>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02b      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d027      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2c      	ldr	r2, [pc, #176]	; (8002750 <TIM_Base_SetConfig+0x118>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d023      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <TIM_Base_SetConfig+0x11c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01f      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <TIM_Base_SetConfig+0x120>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01b      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a29      	ldr	r2, [pc, #164]	; (800275c <TIM_Base_SetConfig+0x124>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d017      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a28      	ldr	r2, [pc, #160]	; (8002760 <TIM_Base_SetConfig+0x128>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a27      	ldr	r2, [pc, #156]	; (8002764 <TIM_Base_SetConfig+0x12c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00f      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <TIM_Base_SetConfig+0x130>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00b      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a25      	ldr	r2, [pc, #148]	; (800276c <TIM_Base_SetConfig+0x134>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a24      	ldr	r2, [pc, #144]	; (8002770 <TIM_Base_SetConfig+0x138>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a23      	ldr	r2, [pc, #140]	; (8002774 <TIM_Base_SetConfig+0x13c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d108      	bne.n	80026fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <TIM_Base_SetConfig+0x114>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <TIM_Base_SetConfig+0xf8>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a0c      	ldr	r2, [pc, #48]	; (800275c <TIM_Base_SetConfig+0x124>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d103      	bne.n	8002738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	615a      	str	r2, [r3, #20]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40010000 	.word	0x40010000
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800
 8002758:	40000c00 	.word	0x40000c00
 800275c:	40010400 	.word	0x40010400
 8002760:	40014000 	.word	0x40014000
 8002764:	40014400 	.word	0x40014400
 8002768:	40014800 	.word	0x40014800
 800276c:	40001800 	.word	0x40001800
 8002770:	40001c00 	.word	0x40001c00
 8002774:	40002000 	.word	0x40002000

08002778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f023 0201 	bic.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f023 0302 	bic.w	r3, r3, #2
 80027c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a20      	ldr	r2, [pc, #128]	; (8002850 <TIM_OC1_SetConfig+0xd8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d003      	beq.n	80027dc <TIM_OC1_SetConfig+0x64>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <TIM_OC1_SetConfig+0xdc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d10c      	bne.n	80027f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0308 	bic.w	r3, r3, #8
 80027e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a15      	ldr	r2, [pc, #84]	; (8002850 <TIM_OC1_SetConfig+0xd8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d003      	beq.n	8002806 <TIM_OC1_SetConfig+0x8e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <TIM_OC1_SetConfig+0xdc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d111      	bne.n	800282a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800280c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	621a      	str	r2, [r3, #32]
}
 8002844:	bf00      	nop
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40010000 	.word	0x40010000
 8002854:	40010400 	.word	0x40010400

08002858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	f023 0210 	bic.w	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f023 0320 	bic.w	r3, r3, #32
 80028a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a22      	ldr	r2, [pc, #136]	; (800293c <TIM_OC2_SetConfig+0xe4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <TIM_OC2_SetConfig+0x68>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a21      	ldr	r2, [pc, #132]	; (8002940 <TIM_OC2_SetConfig+0xe8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10d      	bne.n	80028dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a17      	ldr	r2, [pc, #92]	; (800293c <TIM_OC2_SetConfig+0xe4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_OC2_SetConfig+0x94>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a16      	ldr	r2, [pc, #88]	; (8002940 <TIM_OC2_SetConfig+0xe8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d113      	bne.n	8002914 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000
 8002940:	40010400 	.word	0x40010400

08002944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0303 	bic.w	r3, r3, #3
 800297a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800298c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <TIM_OC3_SetConfig+0xe0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_OC3_SetConfig+0x66>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a20      	ldr	r2, [pc, #128]	; (8002a28 <TIM_OC3_SetConfig+0xe4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d10d      	bne.n	80029c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <TIM_OC3_SetConfig+0xe0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d003      	beq.n	80029d6 <TIM_OC3_SetConfig+0x92>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a15      	ldr	r2, [pc, #84]	; (8002a28 <TIM_OC3_SetConfig+0xe4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d113      	bne.n	80029fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	621a      	str	r2, [r3, #32]
}
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40010400 	.word	0x40010400

08002a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	031b      	lsls	r3, r3, #12
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <TIM_OC4_SetConfig+0xa4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d003      	beq.n	8002a94 <TIM_OC4_SetConfig+0x68>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <TIM_OC4_SetConfig+0xa8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d109      	bne.n	8002aa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	621a      	str	r2, [r3, #32]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40010000 	.word	0x40010000
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f023 0201 	bic.w	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f023 030a 	bic.w	r3, r3, #10
 8002b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	621a      	str	r2, [r3, #32]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b087      	sub	sp, #28
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f023 0210 	bic.w	r2, r3, #16
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	031b      	lsls	r3, r3, #12
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f043 0307 	orr.w	r3, r3, #7
 8002bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	609a      	str	r2, [r3, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	609a      	str	r2, [r3, #8]
}
 8002c00:	bf00      	nop
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	2201      	movs	r2, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	401a      	ands	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f003 031f 	and.w	r3, r3, #31
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e05a      	b.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d022      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbc:	d01d      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d018      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a1b      	ldr	r2, [pc, #108]	; (8002d3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d00e      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d009      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d004      	beq.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10c      	bne.n	8002d14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40010000 	.word	0x40010000
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	40000c00 	.word	0x40000c00
 8002d44:	40010400 	.word	0x40010400
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	40001800 	.word	0x40001800

08002d50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e03d      	b.n	8002de8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e03f      	b.n	8002eae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f001 fe44 	bl	8004ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2224      	movs	r2, #36	; 0x24
 8002e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fab1 	bl	80033c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	6912      	ldr	r2, [r2, #16]
 8002e70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	6952      	ldr	r2, [r2, #20]
 8002e80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	68d2      	ldr	r2, [r2, #12]
 8002e90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d140      	bne.n	8002f52 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_UART_Receive_IT+0x26>
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e039      	b.n	8002f54 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_UART_Receive_IT+0x38>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e032      	b.n	8002f54 <HAL_UART_Receive_IT+0x9e>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	88fa      	ldrh	r2, [r7, #6]
 8002f00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2222      	movs	r2, #34	; 0x22
 8002f12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	68d2      	ldr	r2, [r2, #12]
 8002f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	6952      	ldr	r2, [r2, #20]
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	68d2      	ldr	r2, [r2, #12]
 8002f48:	f042 0220 	orr.w	r2, r2, #32
 8002f4c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e000      	b.n	8002f54 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
  }
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10d      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x52>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f98b 	bl	80032c6 <UART_Receive_IT>
      return;
 8002fb0:	e0d1      	b.n	8003156 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80b0 	beq.w	800311a <HAL_UART_IRQHandler+0x1ba>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x70>
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80a5 	beq.w	800311a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x90>
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe8:	f043 0201 	orr.w	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_UART_IRQHandler+0xb0>
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	f043 0202 	orr.w	r2, r3, #2
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_UART_IRQHandler+0xd0>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00f      	beq.n	800305a <HAL_UART_IRQHandler+0xfa>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	f003 0320 	and.w	r3, r3, #32
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <HAL_UART_IRQHandler+0xee>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	f043 0208 	orr.w	r2, r3, #8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d078      	beq.n	8003154 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <HAL_UART_IRQHandler+0x11c>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f925 	bl	80032c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003086:	2b40      	cmp	r3, #64	; 0x40
 8003088:	bf0c      	ite	eq
 800308a:	2301      	moveq	r3, #1
 800308c:	2300      	movne	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_UART_IRQHandler+0x144>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d031      	beq.n	8003108 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f86f 	bl	8003188 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b40      	cmp	r3, #64	; 0x40
 80030b6:	d123      	bne.n	8003100 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	6952      	ldr	r2, [r2, #20]
 80030c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d013      	beq.n	80030f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d4:	4a21      	ldr	r2, [pc, #132]	; (800315c <HAL_UART_IRQHandler+0x1fc>)
 80030d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe f838 	bl	8001152 <HAL_DMA_Abort_IT>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d016      	beq.n	8003116 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f2:	4610      	mov	r0, r2
 80030f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f6:	e00e      	b.n	8003116 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f83b 	bl	8003174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030fe:	e00a      	b.n	8003116 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f837 	bl	8003174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003106:	e006      	b.n	8003116 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f833 	bl	8003174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003114:	e01e      	b.n	8003154 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003116:	bf00      	nop
    return;
 8003118:	e01c      	b.n	8003154 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_UART_IRQHandler+0x1d6>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f85c 	bl	80031ec <UART_Transmit_IT>
    return;
 8003134:	e00f      	b.n	8003156 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_UART_IRQHandler+0x1f6>
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f8a3 	bl	8003296 <UART_EndTransmit_IT>
    return;
 8003150:	bf00      	nop
 8003152:	e000      	b.n	8003156 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003154:	bf00      	nop
  }
}
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	080031c5 	.word	0x080031c5

08003160 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	68d2      	ldr	r2, [r2, #12]
 800319a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800319e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	6952      	ldr	r2, [r2, #20]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f7ff ffc8 	bl	8003174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b21      	cmp	r3, #33	; 0x21
 80031fe:	d143      	bne.n	8003288 <UART_Transmit_IT+0x9c>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003208:	d119      	bne.n	800323e <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	8812      	ldrh	r2, [r2, #0]
 8003218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800321c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d105      	bne.n	8003232 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	1c9a      	adds	r2, r3, #2
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	621a      	str	r2, [r3, #32]
 8003230:	e00e      	b.n	8003250 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	621a      	str	r2, [r3, #32]
 800323c:	e008      	b.n	8003250 <UART_Transmit_IT+0x64>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	1c58      	adds	r0, r3, #1
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	6208      	str	r0, [r1, #32]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29b      	uxth	r3, r3
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4619      	mov	r1, r3
 800325e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10f      	bne.n	8003284 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	68d2      	ldr	r2, [r2, #12]
 800326e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003272:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	68d2      	ldr	r2, [r2, #12]
 800327e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003282:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	e000      	b.n	800328a <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003288:	2302      	movs	r3, #2
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6812      	ldr	r2, [r2, #0]
 80032a6:	68d2      	ldr	r2, [r2, #12]
 80032a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ff52 	bl	8003160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b22      	cmp	r3, #34	; 0x22
 80032d8:	d171      	bne.n	80033be <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e2:	d123      	bne.n	800332c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10e      	bne.n	8003310 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
 800330e:	e029      	b.n	8003364 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	b29b      	uxth	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	629a      	str	r2, [r3, #40]	; 0x28
 800332a:	e01b      	b.n	8003364 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	1c59      	adds	r1, r3, #1
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6291      	str	r1, [r2, #40]	; 0x28
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	6852      	ldr	r2, [r2, #4]
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e00c      	b.n	8003364 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	1c59      	adds	r1, r3, #1
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6291      	str	r1, [r2, #40]	; 0x28
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	6852      	ldr	r2, [r2, #4]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29b      	uxth	r3, r3
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4619      	mov	r1, r3
 8003372:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003374:	2b00      	cmp	r3, #0
 8003376:	d120      	bne.n	80033ba <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	68d2      	ldr	r2, [r2, #12]
 8003382:	f022 0220 	bic.w	r2, r2, #32
 8003386:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	68d2      	ldr	r2, [r2, #12]
 8003392:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003396:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	6952      	ldr	r2, [r2, #20]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fed9 	bl	8004168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e002      	b.n	80033c0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	e000      	b.n	80033c0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80033be:	2302      	movs	r3, #2
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033cc:	b0a3      	sub	sp, #140	; 0x8c
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	67f8      	str	r0, [r7, #124]	; 0x7c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  MODIFY_REG(huart->Instance->CR1,
 8003402:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003404:	6819      	ldr	r1, [r3, #0]
 8003406:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 8003410:	f022 020c 	bic.w	r2, r2, #12
 8003414:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003418:	4313      	orrs	r3, r2
 800341a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800341c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800342a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	614b      	str	r3, [r1, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343a:	f040 8171 	bne.w	8003720 <UART_SetConfig+0x358>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800343e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4ab4      	ldr	r2, [pc, #720]	; (8003714 <UART_SetConfig+0x34c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d005      	beq.n	8003454 <UART_SetConfig+0x8c>
 8003448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4ab2      	ldr	r2, [pc, #712]	; (8003718 <UART_SetConfig+0x350>)
 800344e:	4293      	cmp	r3, r2
 8003450:	f040 80b1 	bne.w	80035b6 <UART_SetConfig+0x1ee>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003454:	f7fe fca2 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8003458:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800345c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800345e:	681d      	ldr	r5, [r3, #0]
 8003460:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003464:	4619      	mov	r1, r3
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	460b      	mov	r3, r1
 800346c:	4614      	mov	r4, r2
 800346e:	18db      	adds	r3, r3, r3
 8003470:	eb44 0404 	adc.w	r4, r4, r4
 8003474:	185b      	adds	r3, r3, r1
 8003476:	eb44 0402 	adc.w	r4, r4, r2
 800347a:	00e0      	lsls	r0, r4, #3
 800347c:	6478      	str	r0, [r7, #68]	; 0x44
 800347e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003480:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003484:	6478      	str	r0, [r7, #68]	; 0x44
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	643b      	str	r3, [r7, #64]	; 0x40
 800348a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800348e:	eb13 0801 	adds.w	r8, r3, r1
 8003492:	eb44 0902 	adc.w	r9, r4, r2
 8003496:	4640      	mov	r0, r8
 8003498:	4649      	mov	r1, r9
 800349a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f04f 0400 	mov.w	r4, #0
 80034a2:	18db      	adds	r3, r3, r3
 80034a4:	eb44 0404 	adc.w	r4, r4, r4
 80034a8:	461a      	mov	r2, r3
 80034aa:	4623      	mov	r3, r4
 80034ac:	f7fd fb26 	bl	8000afc <__aeabi_uldivmod>
 80034b0:	4603      	mov	r3, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b99      	ldr	r3, [pc, #612]	; (800371c <UART_SetConfig+0x354>)
 80034b8:	fba3 2302 	umull	r2, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	011e      	lsls	r6, r3, #4
 80034c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034c4:	4619      	mov	r1, r3
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	18db      	adds	r3, r3, r3
 80034d0:	eb44 0404 	adc.w	r4, r4, r4
 80034d4:	185b      	adds	r3, r3, r1
 80034d6:	eb44 0402 	adc.w	r4, r4, r2
 80034da:	00e0      	lsls	r0, r4, #3
 80034dc:	63f8      	str	r0, [r7, #60]	; 0x3c
 80034de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80034e0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80034e4:	63f8      	str	r0, [r7, #60]	; 0x3c
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ea:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80034ee:	eb13 0801 	adds.w	r8, r3, r1
 80034f2:	eb44 0902 	adc.w	r9, r4, r2
 80034f6:	4640      	mov	r0, r8
 80034f8:	4649      	mov	r1, r9
 80034fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f04f 0400 	mov.w	r4, #0
 8003502:	18db      	adds	r3, r3, r3
 8003504:	eb44 0404 	adc.w	r4, r4, r4
 8003508:	461a      	mov	r2, r3
 800350a:	4623      	mov	r3, r4
 800350c:	f7fd faf6 	bl	8000afc <__aeabi_uldivmod>
 8003510:	4603      	mov	r3, r0
 8003512:	460c      	mov	r4, r1
 8003514:	461a      	mov	r2, r3
 8003516:	4b81      	ldr	r3, [pc, #516]	; (800371c <UART_SetConfig+0x354>)
 8003518:	fba3 1302 	umull	r1, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	2164      	movs	r1, #100	; 0x64
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	3332      	adds	r3, #50	; 0x32
 800352a:	4a7c      	ldr	r2, [pc, #496]	; (800371c <UART_SetConfig+0x354>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003538:	441e      	add	r6, r3
 800353a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800353e:	4619      	mov	r1, r3
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	460b      	mov	r3, r1
 8003546:	4614      	mov	r4, r2
 8003548:	18db      	adds	r3, r3, r3
 800354a:	eb44 0404 	adc.w	r4, r4, r4
 800354e:	185b      	adds	r3, r3, r1
 8003550:	eb44 0402 	adc.w	r4, r4, r2
 8003554:	00e0      	lsls	r0, r4, #3
 8003556:	6378      	str	r0, [r7, #52]	; 0x34
 8003558:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800355a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800355e:	6378      	str	r0, [r7, #52]	; 0x34
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	633b      	str	r3, [r7, #48]	; 0x30
 8003564:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003568:	eb13 0801 	adds.w	r8, r3, r1
 800356c:	eb44 0902 	adc.w	r9, r4, r2
 8003570:	4640      	mov	r0, r8
 8003572:	4649      	mov	r1, r9
 8003574:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f04f 0400 	mov.w	r4, #0
 800357c:	18db      	adds	r3, r3, r3
 800357e:	eb44 0404 	adc.w	r4, r4, r4
 8003582:	461a      	mov	r2, r3
 8003584:	4623      	mov	r3, r4
 8003586:	f7fd fab9 	bl	8000afc <__aeabi_uldivmod>
 800358a:	4603      	mov	r3, r0
 800358c:	460c      	mov	r4, r1
 800358e:	461a      	mov	r2, r3
 8003590:	4b62      	ldr	r3, [pc, #392]	; (800371c <UART_SetConfig+0x354>)
 8003592:	fba3 1302 	umull	r1, r3, r3, r2
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2164      	movs	r1, #100	; 0x64
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	3332      	adds	r3, #50	; 0x32
 80035a4:	4a5d      	ldr	r2, [pc, #372]	; (800371c <UART_SetConfig+0x354>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	4433      	add	r3, r6
 80035b2:	60ab      	str	r3, [r5, #8]
 80035b4:	e240      	b.n	8003a38 <UART_SetConfig+0x670>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035b6:	f7fe fbdd 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 80035ba:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	673a      	str	r2, [r7, #112]	; 0x70
 80035c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035c8:	4619      	mov	r1, r3
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4614      	mov	r4, r2
 80035d2:	18db      	adds	r3, r3, r3
 80035d4:	eb44 0404 	adc.w	r4, r4, r4
 80035d8:	185b      	adds	r3, r3, r1
 80035da:	eb44 0402 	adc.w	r4, r4, r2
 80035de:	00e0      	lsls	r0, r4, #3
 80035e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80035e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035e4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80035e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80035f2:	185d      	adds	r5, r3, r1
 80035f4:	eb44 0602 	adc.w	r6, r4, r2
 80035f8:	4628      	mov	r0, r5
 80035fa:	4631      	mov	r1, r6
 80035fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f04f 0400 	mov.w	r4, #0
 8003604:	18db      	adds	r3, r3, r3
 8003606:	eb44 0404 	adc.w	r4, r4, r4
 800360a:	461a      	mov	r2, r3
 800360c:	4623      	mov	r3, r4
 800360e:	f7fd fa75 	bl	8000afc <__aeabi_uldivmod>
 8003612:	4603      	mov	r3, r0
 8003614:	460c      	mov	r4, r1
 8003616:	461a      	mov	r2, r3
 8003618:	4b40      	ldr	r3, [pc, #256]	; (800371c <UART_SetConfig+0x354>)
 800361a:	fba3 2302 	umull	r2, r3, r3, r2
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	011e      	lsls	r6, r3, #4
 8003622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003626:	4619      	mov	r1, r3
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	460b      	mov	r3, r1
 800362e:	4614      	mov	r4, r2
 8003630:	18db      	adds	r3, r3, r3
 8003632:	eb44 0404 	adc.w	r4, r4, r4
 8003636:	185b      	adds	r3, r3, r1
 8003638:	eb44 0402 	adc.w	r4, r4, r2
 800363c:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003640:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 8003644:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003648:	4653      	mov	r3, sl
 800364a:	465c      	mov	r4, fp
 800364c:	eb13 0a01 	adds.w	sl, r3, r1
 8003650:	eb44 0b02 	adc.w	fp, r4, r2
 8003654:	4650      	mov	r0, sl
 8003656:	4659      	mov	r1, fp
 8003658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f04f 0400 	mov.w	r4, #0
 8003660:	18db      	adds	r3, r3, r3
 8003662:	eb44 0404 	adc.w	r4, r4, r4
 8003666:	461a      	mov	r2, r3
 8003668:	4623      	mov	r3, r4
 800366a:	f7fd fa47 	bl	8000afc <__aeabi_uldivmod>
 800366e:	4603      	mov	r3, r0
 8003670:	460c      	mov	r4, r1
 8003672:	461a      	mov	r2, r3
 8003674:	4b29      	ldr	r3, [pc, #164]	; (800371c <UART_SetConfig+0x354>)
 8003676:	fba3 1302 	umull	r1, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2164      	movs	r1, #100	; 0x64
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	3332      	adds	r3, #50	; 0x32
 8003688:	4a24      	ldr	r2, [pc, #144]	; (800371c <UART_SetConfig+0x354>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003696:	441e      	add	r6, r3
 8003698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800369c:	4619      	mov	r1, r3
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4614      	mov	r4, r2
 80036a6:	18db      	adds	r3, r3, r3
 80036a8:	eb44 0404 	adc.w	r4, r4, r4
 80036ac:	185b      	adds	r3, r3, r1
 80036ae:	eb44 0402 	adc.w	r4, r4, r2
 80036b2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80036b6:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80036ba:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80036be:	4643      	mov	r3, r8
 80036c0:	464c      	mov	r4, r9
 80036c2:	eb13 0801 	adds.w	r8, r3, r1
 80036c6:	eb44 0902 	adc.w	r9, r4, r2
 80036ca:	4640      	mov	r0, r8
 80036cc:	4649      	mov	r1, r9
 80036ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	18db      	adds	r3, r3, r3
 80036d8:	eb44 0404 	adc.w	r4, r4, r4
 80036dc:	461a      	mov	r2, r3
 80036de:	4623      	mov	r3, r4
 80036e0:	f7fd fa0c 	bl	8000afc <__aeabi_uldivmod>
 80036e4:	4603      	mov	r3, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <UART_SetConfig+0x354>)
 80036ec:	fba3 1302 	umull	r1, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	2164      	movs	r1, #100	; 0x64
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	3332      	adds	r3, #50	; 0x32
 80036fe:	4a07      	ldr	r2, [pc, #28]	; (800371c <UART_SetConfig+0x354>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	4433      	add	r3, r6
 800370c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800370e:	6093      	str	r3, [r2, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003710:	e192      	b.n	8003a38 <UART_SetConfig+0x670>
 8003712:	bf00      	nop
 8003714:	40011000 	.word	0x40011000
 8003718:	40011400 	.word	0x40011400
 800371c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4bc1      	ldr	r3, [pc, #772]	; (8003a2c <UART_SetConfig+0x664>)
 8003726:	429a      	cmp	r2, r3
 8003728:	d005      	beq.n	8003736 <UART_SetConfig+0x36e>
 800372a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4bc0      	ldr	r3, [pc, #768]	; (8003a30 <UART_SetConfig+0x668>)
 8003730:	429a      	cmp	r2, r3
 8003732:	f040 80bf 	bne.w	80038b4 <UART_SetConfig+0x4ec>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003736:	f7fe fb31 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 800373a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800373e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003740:	681e      	ldr	r6, [r3, #0]
 8003742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003746:	4619      	mov	r1, r3
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	460b      	mov	r3, r1
 800374e:	4614      	mov	r4, r2
 8003750:	18db      	adds	r3, r3, r3
 8003752:	eb44 0404 	adc.w	r4, r4, r4
 8003756:	185b      	adds	r3, r3, r1
 8003758:	eb44 0402 	adc.w	r4, r4, r2
 800375c:	00e0      	lsls	r0, r4, #3
 800375e:	6278      	str	r0, [r7, #36]	; 0x24
 8003760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003762:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003766:	6278      	str	r0, [r7, #36]	; 0x24
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	623b      	str	r3, [r7, #32]
 800376c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003770:	eb13 0801 	adds.w	r8, r3, r1
 8003774:	eb44 0902 	adc.w	r9, r4, r2
 8003778:	4640      	mov	r0, r8
 800377a:	4649      	mov	r1, r9
 800377c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f04f 0400 	mov.w	r4, #0
 8003784:	00a2      	lsls	r2, r4, #2
 8003786:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800378a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800378e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	65bb      	str	r3, [r7, #88]	; 0x58
 8003794:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003798:	f7fd f9b0 	bl	8000afc <__aeabi_uldivmod>
 800379c:	4603      	mov	r3, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	461a      	mov	r2, r3
 80037a2:	4ba4      	ldr	r3, [pc, #656]	; (8003a34 <UART_SetConfig+0x66c>)
 80037a4:	fba3 2302 	umull	r2, r3, r3, r2
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	011d      	lsls	r5, r3, #4
 80037ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037b0:	4619      	mov	r1, r3
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4614      	mov	r4, r2
 80037ba:	18db      	adds	r3, r3, r3
 80037bc:	eb44 0404 	adc.w	r4, r4, r4
 80037c0:	185b      	adds	r3, r3, r1
 80037c2:	eb44 0402 	adc.w	r4, r4, r2
 80037c6:	00e0      	lsls	r0, r4, #3
 80037c8:	61f8      	str	r0, [r7, #28]
 80037ca:	69f8      	ldr	r0, [r7, #28]
 80037cc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80037d0:	61f8      	str	r0, [r7, #28]
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80037da:	eb13 0801 	adds.w	r8, r3, r1
 80037de:	eb44 0902 	adc.w	r9, r4, r2
 80037e2:	4640      	mov	r0, r8
 80037e4:	4649      	mov	r1, r9
 80037e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f04f 0400 	mov.w	r4, #0
 80037ee:	00a2      	lsls	r2, r4, #2
 80037f0:	657a      	str	r2, [r7, #84]	; 0x54
 80037f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037f4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80037f8:	657a      	str	r2, [r7, #84]	; 0x54
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	653b      	str	r3, [r7, #80]	; 0x50
 80037fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003802:	f7fd f97b 	bl	8000afc <__aeabi_uldivmod>
 8003806:	4603      	mov	r3, r0
 8003808:	460c      	mov	r4, r1
 800380a:	461a      	mov	r2, r3
 800380c:	4b89      	ldr	r3, [pc, #548]	; (8003a34 <UART_SetConfig+0x66c>)
 800380e:	fba3 1302 	umull	r1, r3, r3, r2
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2164      	movs	r1, #100	; 0x64
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	3332      	adds	r3, #50	; 0x32
 8003820:	4a84      	ldr	r2, [pc, #528]	; (8003a34 <UART_SetConfig+0x66c>)
 8003822:	fba2 2303 	umull	r2, r3, r2, r3
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382c:	441d      	add	r5, r3
 800382e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003832:	4619      	mov	r1, r3
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	460b      	mov	r3, r1
 800383a:	4614      	mov	r4, r2
 800383c:	18db      	adds	r3, r3, r3
 800383e:	eb44 0404 	adc.w	r4, r4, r4
 8003842:	185b      	adds	r3, r3, r1
 8003844:	eb44 0402 	adc.w	r4, r4, r2
 8003848:	00e0      	lsls	r0, r4, #3
 800384a:	6178      	str	r0, [r7, #20]
 800384c:	6978      	ldr	r0, [r7, #20]
 800384e:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003852:	6178      	str	r0, [r7, #20]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800385c:	eb13 0801 	adds.w	r8, r3, r1
 8003860:	eb44 0902 	adc.w	r9, r4, r2
 8003864:	4640      	mov	r0, r8
 8003866:	4649      	mov	r1, r9
 8003868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f04f 0400 	mov.w	r4, #0
 8003870:	00a2      	lsls	r2, r4, #2
 8003872:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003876:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800387a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003880:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003884:	f7fd f93a 	bl	8000afc <__aeabi_uldivmod>
 8003888:	4603      	mov	r3, r0
 800388a:	460c      	mov	r4, r1
 800388c:	461a      	mov	r2, r3
 800388e:	4b69      	ldr	r3, [pc, #420]	; (8003a34 <UART_SetConfig+0x66c>)
 8003890:	fba3 1302 	umull	r1, r3, r3, r2
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	2164      	movs	r1, #100	; 0x64
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	3332      	adds	r3, #50	; 0x32
 80038a2:	4a64      	ldr	r2, [pc, #400]	; (8003a34 <UART_SetConfig+0x66c>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	442b      	add	r3, r5
 80038b0:	60b3      	str	r3, [r6, #8]
 80038b2:	e0c1      	b.n	8003a38 <UART_SetConfig+0x670>
      pclk = HAL_RCC_GetPCLK1Freq();
 80038b4:	f7fe fa5e 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 80038b8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80038c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038c6:	4619      	mov	r1, r3
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4614      	mov	r4, r2
 80038d0:	18db      	adds	r3, r3, r3
 80038d2:	eb44 0404 	adc.w	r4, r4, r4
 80038d6:	185b      	adds	r3, r3, r1
 80038d8:	eb44 0402 	adc.w	r4, r4, r2
 80038dc:	00e6      	lsls	r6, r4, #3
 80038de:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80038e2:	00dd      	lsls	r5, r3, #3
 80038e4:	462b      	mov	r3, r5
 80038e6:	4634      	mov	r4, r6
 80038e8:	185d      	adds	r5, r3, r1
 80038ea:	eb44 0602 	adc.w	r6, r4, r2
 80038ee:	4628      	mov	r0, r5
 80038f0:	4631      	mov	r1, r6
 80038f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f04f 0400 	mov.w	r4, #0
 80038fa:	00a5      	lsls	r5, r4, #2
 80038fc:	677d      	str	r5, [r7, #116]	; 0x74
 80038fe:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8003900:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8003904:	677d      	str	r5, [r7, #116]	; 0x74
 8003906:	009c      	lsls	r4, r3, #2
 8003908:	673c      	str	r4, [r7, #112]	; 0x70
 800390a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800390e:	f7fd f8f5 	bl	8000afc <__aeabi_uldivmod>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	461a      	mov	r2, r3
 8003918:	4b46      	ldr	r3, [pc, #280]	; (8003a34 <UART_SetConfig+0x66c>)
 800391a:	fba3 1302 	umull	r1, r3, r3, r2
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	011d      	lsls	r5, r3, #4
 8003922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003926:	4619      	mov	r1, r3
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	460b      	mov	r3, r1
 800392e:	4614      	mov	r4, r2
 8003930:	18db      	adds	r3, r3, r3
 8003932:	eb44 0404 	adc.w	r4, r4, r4
 8003936:	185b      	adds	r3, r3, r1
 8003938:	eb44 0402 	adc.w	r4, r4, r2
 800393c:	00e0      	lsls	r0, r4, #3
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	00d8      	lsls	r0, r3, #3
 800394a:	60b8      	str	r0, [r7, #8]
 800394c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003950:	eb13 0801 	adds.w	r8, r3, r1
 8003954:	eb44 0902 	adc.w	r9, r4, r2
 8003958:	4640      	mov	r0, r8
 800395a:	4649      	mov	r1, r9
 800395c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f04f 0400 	mov.w	r4, #0
 8003964:	00a6      	lsls	r6, r4, #2
 8003966:	66fe      	str	r6, [r7, #108]	; 0x6c
 8003968:	6efe      	ldr	r6, [r7, #108]	; 0x6c
 800396a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 800396e:	66fe      	str	r6, [r7, #108]	; 0x6c
 8003970:	009c      	lsls	r4, r3, #2
 8003972:	66bc      	str	r4, [r7, #104]	; 0x68
 8003974:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003978:	f7fd f8c0 	bl	8000afc <__aeabi_uldivmod>
 800397c:	4603      	mov	r3, r0
 800397e:	460c      	mov	r4, r1
 8003980:	461a      	mov	r2, r3
 8003982:	4b2c      	ldr	r3, [pc, #176]	; (8003a34 <UART_SetConfig+0x66c>)
 8003984:	fba3 1302 	umull	r1, r3, r3, r2
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	2164      	movs	r1, #100	; 0x64
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	3332      	adds	r3, #50	; 0x32
 8003996:	4a27      	ldr	r2, [pc, #156]	; (8003a34 <UART_SetConfig+0x66c>)
 8003998:	fba2 1303 	umull	r1, r3, r2, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a2:	441d      	add	r5, r3
 80039a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039a8:	4619      	mov	r1, r3
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4614      	mov	r4, r2
 80039b2:	18db      	adds	r3, r3, r3
 80039b4:	eb44 0404 	adc.w	r4, r4, r4
 80039b8:	185b      	adds	r3, r3, r1
 80039ba:	eb44 0402 	adc.w	r4, r4, r2
 80039be:	00e0      	lsls	r0, r4, #3
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	00d8      	lsls	r0, r3, #3
 80039cc:	6038      	str	r0, [r7, #0]
 80039ce:	e897 0018 	ldmia.w	r7, {r3, r4}
 80039d2:	eb13 0801 	adds.w	r8, r3, r1
 80039d6:	eb44 0902 	adc.w	r9, r4, r2
 80039da:	4640      	mov	r0, r8
 80039dc:	4649      	mov	r1, r9
 80039de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	00a6      	lsls	r6, r4, #2
 80039e8:	667e      	str	r6, [r7, #100]	; 0x64
 80039ea:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 80039ec:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80039f0:	667e      	str	r6, [r7, #100]	; 0x64
 80039f2:	009c      	lsls	r4, r3, #2
 80039f4:	663c      	str	r4, [r7, #96]	; 0x60
 80039f6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80039fa:	f7fd f87f 	bl	8000afc <__aeabi_uldivmod>
 80039fe:	4603      	mov	r3, r0
 8003a00:	460c      	mov	r4, r1
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <UART_SetConfig+0x66c>)
 8003a06:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2164      	movs	r1, #100	; 0x64
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	3332      	adds	r3, #50	; 0x32
 8003a18:	4a06      	ldr	r2, [pc, #24]	; (8003a34 <UART_SetConfig+0x66c>)
 8003a1a:	fba2 1303 	umull	r1, r3, r2, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	442b      	add	r3, r5
 8003a26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a28:	6093      	str	r3, [r2, #8]
}
 8003a2a:	e005      	b.n	8003a38 <UART_SetConfig+0x670>
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40011400 	.word	0x40011400
 8003a34:	51eb851f 	.word	0x51eb851f
 8003a38:	bf00      	nop
 8003a3a:	378c      	adds	r7, #140	; 0x8c
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a42:	bf00      	nop

08003a44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4a:	f107 031c 	add.w	r3, r7, #28
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	60da      	str	r2, [r3, #12]
 8003a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	4a68      	ldr	r2, [pc, #416]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003a60:	4b67      	ldr	r3, [pc, #412]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	f043 0310 	orr.w	r3, r3, #16
 8003a68:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6a:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	61bb      	str	r3, [r7, #24]
 8003a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003a7c:	4b60      	ldr	r3, [pc, #384]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	6313      	str	r3, [r2, #48]	; 0x30
 8003a86:	4b5e      	ldr	r3, [pc, #376]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a92:	2300      	movs	r3, #0
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003a98:	4b59      	ldr	r3, [pc, #356]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8003aa2:	4b57      	ldr	r3, [pc, #348]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	4a53      	ldr	r2, [pc, #332]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	4a4c      	ldr	r2, [pc, #304]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b49      	ldr	r3, [pc, #292]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	4a45      	ldr	r2, [pc, #276]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003aec:	4b44      	ldr	r3, [pc, #272]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	f043 0308 	orr.w	r3, r3, #8
 8003af4:	6313      	str	r3, [r2, #48]	; 0x30
 8003af6:	4b42      	ldr	r3, [pc, #264]	; (8003c00 <MX_GPIO_Init+0x1bc>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003b02:	2200      	movs	r2, #0
 8003b04:	2138      	movs	r1, #56	; 0x38
 8003b06:	483f      	ldr	r0, [pc, #252]	; (8003c04 <MX_GPIO_Init+0x1c0>)
 8003b08:	f7fd fce0 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b12:	483d      	ldr	r0, [pc, #244]	; (8003c08 <MX_GPIO_Init+0x1c4>)
 8003b14:	f7fd fcda 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003b18:	2201      	movs	r2, #1
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	483a      	ldr	r0, [pc, #232]	; (8003c08 <MX_GPIO_Init+0x1c4>)
 8003b1e:	f7fd fcd5 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003b22:	2200      	movs	r2, #0
 8003b24:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003b28:	4838      	ldr	r0, [pc, #224]	; (8003c0c <MX_GPIO_Init+0x1c8>)
 8003b2a:	f7fd fccf 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f44f 6171 	mov.w	r1, #3856	; 0xf10
 8003b34:	4836      	ldr	r0, [pc, #216]	; (8003c10 <MX_GPIO_Init+0x1cc>)
 8003b36:	f7fd fcc9 	bl	80014cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PE4 PE5 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8003b3a:	2338      	movs	r3, #56	; 0x38
 8003b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b4a:	f107 031c 	add.w	r3, r7, #28
 8003b4e:	4619      	mov	r1, r3
 8003b50:	482c      	ldr	r0, [pc, #176]	; (8003c04 <MX_GPIO_Init+0x1c0>)
 8003b52:	f7fd fb21 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 8003b56:	f242 0301 	movw	r3, #8193	; 0x2001
 8003b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b64:	2300      	movs	r3, #0
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b68:	f107 031c 	add.w	r3, r7, #28
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4826      	ldr	r0, [pc, #152]	; (8003c08 <MX_GPIO_Init+0x1c4>)
 8003b70:	f7fd fb12 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003b74:	2304      	movs	r3, #4
 8003b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003b80:	f107 031c 	add.w	r3, r7, #28
 8003b84:	4619      	mov	r1, r3
 8003b86:	4821      	ldr	r0, [pc, #132]	; (8003c0c <MX_GPIO_Init+0x1c8>)
 8003b88:	f7fd fb06 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003b8c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b92:	2301      	movs	r3, #1
 8003b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b9e:	f107 031c 	add.w	r3, r7, #28
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4819      	ldr	r0, [pc, #100]	; (8003c0c <MX_GPIO_Init+0x1c8>)
 8003ba6:	f7fd faf7 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003baa:	f44f 6371 	mov.w	r3, #3856	; 0xf10
 8003bae:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bbc:	f107 031c 	add.w	r3, r7, #28
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4813      	ldr	r0, [pc, #76]	; (8003c10 <MX_GPIO_Init+0x1cc>)
 8003bc4:	f7fd fae8 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003bd4:	f107 031c 	add.w	r3, r7, #28
 8003bd8:	4619      	mov	r1, r3
 8003bda:	480d      	ldr	r0, [pc, #52]	; (8003c10 <MX_GPIO_Init+0x1cc>)
 8003bdc:	f7fd fadc 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003be0:	2302      	movs	r3, #2
 8003be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <MX_GPIO_Init+0x1d0>)
 8003be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003bec:	f107 031c 	add.w	r3, r7, #28
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4804      	ldr	r0, [pc, #16]	; (8003c04 <MX_GPIO_Init+0x1c0>)
 8003bf4:	f7fd fad0 	bl	8001198 <HAL_GPIO_Init>

}
 8003bf8:	bf00      	nop
 8003bfa:	3730      	adds	r7, #48	; 0x30
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40020800 	.word	0x40020800
 8003c0c:	40020400 	.word	0x40020400
 8003c10:	40020c00 	.word	0x40020c00
 8003c14:	10120000 	.word	0x10120000

08003c18 <HAL_TIM_PeriodElapsedCallback>:
   avg_diff = avg_R - avg_L;

   return avg_diff;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)	//Timer interrupt every 20ms
{
 8003c18:	b590      	push	{r4, r7, lr}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a92      	ldr	r2, [pc, #584]	; (8003e70 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	f040 8116 	bne.w	8003e58 <HAL_TIM_PeriodElapsedCallback+0x240>

		//HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,GPIO_PIN_SET);
		encoder_cnt[0] = TIM2->CNT;
 8003c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	4a90      	ldr	r2, [pc, #576]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003c34:	6013      	str	r3, [r2, #0]
		TIM2->CNT=0;
 8003c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

		encoder_cnt[1] = TIM3->CNT;
 8003c3e:	4b8e      	ldr	r3, [pc, #568]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	4a8c      	ldr	r2, [pc, #560]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003c44:	6053      	str	r3, [r2, #4]
		TIM3->CNT=0;
 8003c46:	4b8c      	ldr	r3, [pc, #560]	; (8003e78 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

		encoder_cnt[2] = TIM4->CNT;
 8003c4c:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	4a88      	ldr	r2, [pc, #544]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003c52:	6093      	str	r3, [r2, #8]
		TIM4->CNT=0;
 8003c54:	4b89      	ldr	r3, [pc, #548]	; (8003e7c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

		encoder_cnt[3] = TIM5->CNT;
 8003c5a:	4b89      	ldr	r3, [pc, #548]	; (8003e80 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	4a85      	ldr	r2, [pc, #532]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003c60:	60d3      	str	r3, [r2, #12]
		TIM5->CNT=0;
 8003c62:	4b87      	ldr	r3, [pc, #540]	; (8003e80 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

		encoder_speed[0] = 164.18 * exp(0.0112*encoder_cnt[0]);
 8003c68:	4b82      	ldr	r3, [pc, #520]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fc fbed 	bl	800044c <__aeabi_ui2d>
 8003c72:	a37b      	add	r3, pc, #492	; (adr r3, 8003e60 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f7fc fc5e 	bl	8000538 <__aeabi_dmul>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	ec44 3b17 	vmov	d7, r3, r4
 8003c84:	eeb0 0a47 	vmov.f32	s0, s14
 8003c88:	eef0 0a67 	vmov.f32	s1, s15
 8003c8c:	f000 fffc 	bl	8004c88 <exp>
 8003c90:	ec51 0b10 	vmov	r0, r1, d0
 8003c94:	a374      	add	r3, pc, #464	; (adr r3, 8003e68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f7fc fc4d 	bl	8000538 <__aeabi_dmul>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	f7fc ff09 	bl	8000abc <__aeabi_d2uiz>
 8003caa:	4602      	mov	r2, r0
 8003cac:	4b75      	ldr	r3, [pc, #468]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003cae:	601a      	str	r2, [r3, #0]
		encoder_speed[1] = 164.18 * exp(0.0112*encoder_cnt[1]);
 8003cb0:	4b70      	ldr	r3, [pc, #448]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fc fbc9 	bl	800044c <__aeabi_ui2d>
 8003cba:	a369      	add	r3, pc, #420	; (adr r3, 8003e60 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc fc3a 	bl	8000538 <__aeabi_dmul>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	ec44 3b17 	vmov	d7, r3, r4
 8003ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8003cd0:	eef0 0a67 	vmov.f32	s1, s15
 8003cd4:	f000 ffd8 	bl	8004c88 <exp>
 8003cd8:	ec51 0b10 	vmov	r0, r1, d0
 8003cdc:	a362      	add	r3, pc, #392	; (adr r3, 8003e68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f7fc fc29 	bl	8000538 <__aeabi_dmul>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	460c      	mov	r4, r1
 8003cea:	4618      	mov	r0, r3
 8003cec:	4621      	mov	r1, r4
 8003cee:	f7fc fee5 	bl	8000abc <__aeabi_d2uiz>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	4b63      	ldr	r3, [pc, #396]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003cf6:	605a      	str	r2, [r3, #4]
		encoder_speed[2] = 164.18 * exp(0.0112*encoder_cnt[2]);
 8003cf8:	4b5e      	ldr	r3, [pc, #376]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fc fba5 	bl	800044c <__aeabi_ui2d>
 8003d02:	a357      	add	r3, pc, #348	; (adr r3, 8003e60 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f7fc fc16 	bl	8000538 <__aeabi_dmul>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	ec44 3b17 	vmov	d7, r3, r4
 8003d14:	eeb0 0a47 	vmov.f32	s0, s14
 8003d18:	eef0 0a67 	vmov.f32	s1, s15
 8003d1c:	f000 ffb4 	bl	8004c88 <exp>
 8003d20:	ec51 0b10 	vmov	r0, r1, d0
 8003d24:	a350      	add	r3, pc, #320	; (adr r3, 8003e68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fc05 	bl	8000538 <__aeabi_dmul>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	460c      	mov	r4, r1
 8003d32:	4618      	mov	r0, r3
 8003d34:	4621      	mov	r1, r4
 8003d36:	f7fc fec1 	bl	8000abc <__aeabi_d2uiz>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4b51      	ldr	r3, [pc, #324]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003d3e:	609a      	str	r2, [r3, #8]
		encoder_speed[3] = 164.18 * exp(0.0112*encoder_cnt[3]);
 8003d40:	4b4c      	ldr	r3, [pc, #304]	; (8003e74 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fc fb81 	bl	800044c <__aeabi_ui2d>
 8003d4a:	a345      	add	r3, pc, #276	; (adr r3, 8003e60 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f7fc fbf2 	bl	8000538 <__aeabi_dmul>
 8003d54:	4603      	mov	r3, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	ec44 3b17 	vmov	d7, r3, r4
 8003d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d60:	eef0 0a67 	vmov.f32	s1, s15
 8003d64:	f000 ff90 	bl	8004c88 <exp>
 8003d68:	ec51 0b10 	vmov	r0, r1, d0
 8003d6c:	a33e      	add	r3, pc, #248	; (adr r3, 8003e68 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d72:	f7fc fbe1 	bl	8000538 <__aeabi_dmul>
 8003d76:	4603      	mov	r3, r0
 8003d78:	460c      	mov	r4, r1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	f7fc fe9d 	bl	8000abc <__aeabi_d2uiz>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003d86:	60da      	str	r2, [r3, #12]

		error_speed[0] = desired_speed - encoder_speed[0];
 8003d88:	4b3f      	ldr	r3, [pc, #252]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003d96:	601a      	str	r2, [r3, #0]
		error_speed[1] = desired_speed - encoder_speed[1];
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b39      	ldr	r3, [pc, #228]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	4b39      	ldr	r3, [pc, #228]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003da6:	605a      	str	r2, [r3, #4]
		error_speed[2] = desired_speed - encoder_speed[2];
 8003da8:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b35      	ldr	r3, [pc, #212]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b35      	ldr	r3, [pc, #212]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003db6:	609a      	str	r2, [r3, #8]
		error_speed[3] = desired_speed - encoder_speed[3];
 8003db8:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003dc6:	60da      	str	r2, [r3, #12]

		PID_speed[0] = old_PID_speed[0] + Kp*error_speed[0];
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b2f      	ldr	r3, [pc, #188]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	fb03 f301 	mul.w	r3, r3, r1
 8003dda:	4413      	add	r3, r2
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4b2e      	ldr	r3, [pc, #184]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003de0:	601a      	str	r2, [r3, #0]
		PID_speed[1] = old_PID_speed[1] + Kp*error_speed[1];
 8003de2:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	fb03 f301 	mul.w	r3, r3, r1
 8003df4:	4413      	add	r3, r2
 8003df6:	461a      	mov	r2, r3
 8003df8:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003dfa:	605a      	str	r2, [r3, #4]
		PID_speed[2] = old_PID_speed[2] + Kp*error_speed[2];
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4619      	mov	r1, r3
 8003e06:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	fb03 f301 	mul.w	r3, r3, r1
 8003e0e:	4413      	add	r3, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003e14:	609a      	str	r2, [r3, #8]
		PID_speed[3] = old_PID_speed[3] + Kp*error_speed[3];
 8003e16:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	fb03 f301 	mul.w	r3, r3, r1
 8003e28:	4413      	add	r3, r2
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003e2e:	60da      	str	r2, [r3, #12]

		old_PID_speed[0] = PID_speed[0];
 8003e30:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003e38:	601a      	str	r2, [r3, #0]
		old_PID_speed[1] = PID_speed[1];
 8003e3a:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003e42:	605a      	str	r2, [r3, #4]
		old_PID_speed[2] = PID_speed[2];
 8003e44:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003e4c:	609a      	str	r2, [r3, #8]
		old_PID_speed[3] = PID_speed[3];
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003e56:	60da      	str	r2, [r3, #12]
	}
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd90      	pop	{r4, r7, pc}
 8003e60:	8db8bac7 	.word	0x8db8bac7
 8003e64:	3f86f006 	.word	0x3f86f006
 8003e68:	8f5c28f6 	.word	0x8f5c28f6
 8003e6c:	406485c2 	.word	0x406485c2
 8003e70:	40001000 	.word	0x40001000
 8003e74:	200000ac 	.word	0x200000ac
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	200000bc 	.word	0x200000bc
 8003e88:	20000008 	.word	0x20000008
 8003e8c:	200000cc 	.word	0x200000cc
 8003e90:	20000010 	.word	0x20000010
 8003e94:	2000000c 	.word	0x2000000c
 8003e98:	200000dc 	.word	0x200000dc

08003e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ea0:	f7fc ffb4 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ea4:	f000 f8e2 	bl	800406c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ea8:	f7ff fdcc 	bl	8003a44 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003eac:	f000 f9fc 	bl	80042a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003eb0:	f000 fabe 	bl	8004430 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003eb4:	f000 fb10 	bl	80044d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003eb8:	f000 fb62 	bl	8004580 <MX_TIM4_Init>
  MX_TIM6_Init();
 8003ebc:	f000 fc08 	bl	80046d0 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8003ec0:	f000 fdb2 	bl	8004a28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003ec4:	f000 fdda 	bl	8004a7c <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8003ec8:	f000 fbae 	bl	8004628 <MX_TIM5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003ecc:	f000 f938 	bl	8004140 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(3000);
 8003ed0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003ed4:	f7fd f80c 	bl	8000ef0 <HAL_Delay>

  //Initialize for motor PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4856      	ldr	r0, [pc, #344]	; (8004034 <main+0x198>)
 8003edc:	f7fd fff6 	bl	8001ecc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	4854      	ldr	r0, [pc, #336]	; (8004034 <main+0x198>)
 8003ee4:	f7fd fff2 	bl	8001ecc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003ee8:	2108      	movs	r1, #8
 8003eea:	4852      	ldr	r0, [pc, #328]	; (8004034 <main+0x198>)
 8003eec:	f7fd ffee 	bl	8001ecc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003ef0:	210c      	movs	r1, #12
 8003ef2:	4850      	ldr	r0, [pc, #320]	; (8004034 <main+0x198>)
 8003ef4:	f7fd ffea 	bl	8001ecc <HAL_TIM_PWM_Start>

  //Initialize for motor direction
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003efe:	484e      	ldr	r0, [pc, #312]	; (8004038 <main+0x19c>)
 8003f00:	f7fd fae4 	bl	80014cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, RESET);
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f0a:	484b      	ldr	r0, [pc, #300]	; (8004038 <main+0x19c>)
 8003f0c:	f7fd fade 	bl	80014cc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8003f10:	2201      	movs	r2, #1
 8003f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003f16:	4848      	ldr	r0, [pc, #288]	; (8004038 <main+0x19c>)
 8003f18:	f7fd fad8 	bl	80014cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f22:	4845      	ldr	r0, [pc, #276]	; (8004038 <main+0x19c>)
 8003f24:	f7fd fad2 	bl	80014cc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f2e:	4843      	ldr	r0, [pc, #268]	; (800403c <main+0x1a0>)
 8003f30:	f7fd facc 	bl	80014cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8003f34:	2200      	movs	r2, #0
 8003f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f3a:	4840      	ldr	r0, [pc, #256]	; (800403c <main+0x1a0>)
 8003f3c:	f7fd fac6 	bl	80014cc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8003f40:	2201      	movs	r2, #1
 8003f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f46:	483d      	ldr	r0, [pc, #244]	; (800403c <main+0x1a0>)
 8003f48:	f7fd fac0 	bl	80014cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, RESET);
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f52:	483a      	ldr	r0, [pc, #232]	; (800403c <main+0x1a0>)
 8003f54:	f7fd faba 	bl	80014cc <HAL_GPIO_WritePin>

  //Initialize for encoder count value
  TIM2->CNT = 0;
 8003f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 0;
 8003f60:	4b37      	ldr	r3, [pc, #220]	; (8004040 <main+0x1a4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->CNT = 0;
 8003f66:	4b37      	ldr	r3, [pc, #220]	; (8004044 <main+0x1a8>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24
  TIM5->CNT = 0;
 8003f6c:	4b36      	ldr	r3, [pc, #216]	; (8004048 <main+0x1ac>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

  //Initialize for Encoder
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003f72:	213c      	movs	r1, #60	; 0x3c
 8003f74:	4835      	ldr	r0, [pc, #212]	; (800404c <main+0x1b0>)
 8003f76:	f7fe f879 	bl	800206c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003f7a:	213c      	movs	r1, #60	; 0x3c
 8003f7c:	4834      	ldr	r0, [pc, #208]	; (8004050 <main+0x1b4>)
 8003f7e:	f7fe f875 	bl	800206c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003f82:	213c      	movs	r1, #60	; 0x3c
 8003f84:	4833      	ldr	r0, [pc, #204]	; (8004054 <main+0x1b8>)
 8003f86:	f7fe f871 	bl	800206c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8003f8a:	213c      	movs	r1, #60	; 0x3c
 8003f8c:	4832      	ldr	r0, [pc, #200]	; (8004058 <main+0x1bc>)
 8003f8e:	f7fe f86d 	bl	800206c <HAL_TIM_Encoder_Start>

  //Initialize for timer interrupt initialization for Encoder (50ms)
  HAL_TIM_Base_Start_IT(&htim6);
 8003f92:	4832      	ldr	r0, [pc, #200]	; (800405c <main+0x1c0>)
 8003f94:	f7fd ff41 	bl	8001e1a <HAL_TIM_Base_Start_IT>

  //LIDAR_scan_start
  //HAL_UART_Transmit(&huart3, &scan_command, 2, 100);

  //robotArm to Cart
  HAL_UART_Receive_IT(&huart2,&rx2_data,1);
 8003f98:	2201      	movs	r2, #1
 8003f9a:	4931      	ldr	r1, [pc, #196]	; (8004060 <main+0x1c4>)
 8003f9c:	4831      	ldr	r0, [pc, #196]	; (8004064 <main+0x1c8>)
 8003f9e:	f7fe ff8a 	bl	8002eb6 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	TIM1->CCR1 = 2000;	//LF
 8003fa2:	4b31      	ldr	r3, [pc, #196]	; (8004068 <main+0x1cc>)
 8003fa4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003fa8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 2000;	//RF
 8003faa:	4b2f      	ldr	r3, [pc, #188]	; (8004068 <main+0x1cc>)
 8003fac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003fb0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 2000;	// LB
 8003fb2:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <main+0x1cc>)
 8003fb4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003fb8:	63da      	str	r2, [r3, #60]	; 0x3c

	//reverse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fc0:	481e      	ldr	r0, [pc, #120]	; (800403c <main+0x1a0>)
 8003fc2:	f7fd fa83 	bl	80014cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fcc:	481b      	ldr	r0, [pc, #108]	; (800403c <main+0x1a0>)
 8003fce:	f7fd fa7d 	bl	80014cc <HAL_GPIO_WritePin>
	TIM1->CCR4 = 2000;	// RB
 8003fd2:	4b25      	ldr	r3, [pc, #148]	; (8004068 <main+0x1cc>)
 8003fd4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40

	if(rx2_data == 1){
 8003fda:	4b21      	ldr	r3, [pc, #132]	; (8004060 <main+0x1c4>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d10f      	bne.n	8004002 <main+0x166>
		TIM1->CCR1 = 0;
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <main+0x1cc>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8003fe8:	4b1f      	ldr	r3, [pc, #124]	; (8004068 <main+0x1cc>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8003fee:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <main+0x1cc>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR4 = 0;
 8003ff4:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <main+0x1cc>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(100);
 8003ffa:	2064      	movs	r0, #100	; 0x64
 8003ffc:	f7fc ff78 	bl	8000ef0 <HAL_Delay>
 8004000:	e7cf      	b.n	8003fa2 <main+0x106>
	}else if(rx2_data == 2){
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <main+0x1c4>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d1cb      	bne.n	8003fa2 <main+0x106>
		 TIM1->CCR1 = 8000;
 800400a:	4b17      	ldr	r3, [pc, #92]	; (8004068 <main+0x1cc>)
 800400c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004010:	635a      	str	r2, [r3, #52]	; 0x34
		 TIM1->CCR2 = 8000;
 8004012:	4b15      	ldr	r3, [pc, #84]	; (8004068 <main+0x1cc>)
 8004014:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004018:	639a      	str	r2, [r3, #56]	; 0x38
		 TIM1->CCR3 = 8000;
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <main+0x1cc>)
 800401c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004020:	63da      	str	r2, [r3, #60]	; 0x3c
		 TIM1->CCR4 = 8000;
 8004022:	4b11      	ldr	r3, [pc, #68]	; (8004068 <main+0x1cc>)
 8004024:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004028:	641a      	str	r2, [r3, #64]	; 0x40
		 HAL_Delay(100);
 800402a:	2064      	movs	r0, #100	; 0x64
 800402c:	f7fc ff60 	bl	8000ef0 <HAL_Delay>
	TIM1->CCR1 = 2000;	//LF
 8004030:	e7b7      	b.n	8003fa2 <main+0x106>
 8004032:	bf00      	nop
 8004034:	200001f0 	.word	0x200001f0
 8004038:	40020400 	.word	0x40020400
 800403c:	40020c00 	.word	0x40020c00
 8004040:	40000400 	.word	0x40000400
 8004044:	40000800 	.word	0x40000800
 8004048:	40000c00 	.word	0x40000c00
 800404c:	20000230 	.word	0x20000230
 8004050:	20000170 	.word	0x20000170
 8004054:	200000f0 	.word	0x200000f0
 8004058:	20000130 	.word	0x20000130
 800405c:	200001b0 	.word	0x200001b0
 8004060:	200000a8 	.word	0x200000a8
 8004064:	200002b0 	.word	0x200002b0
 8004068:	40010000 	.word	0x40010000

0800406c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b094      	sub	sp, #80	; 0x50
 8004070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004072:	f107 0320 	add.w	r3, r7, #32
 8004076:	2230      	movs	r2, #48	; 0x30
 8004078:	2100      	movs	r1, #0
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fdfa 	bl	8004c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004090:	2300      	movs	r3, #0
 8004092:	60bb      	str	r3, [r7, #8]
 8004094:	4a28      	ldr	r2, [pc, #160]	; (8004138 <SystemClock_Config+0xcc>)
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <SystemClock_Config+0xcc>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409e:	6413      	str	r3, [r2, #64]	; 0x40
 80040a0:	4b25      	ldr	r3, [pc, #148]	; (8004138 <SystemClock_Config+0xcc>)
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040ac:	2300      	movs	r3, #0
 80040ae:	607b      	str	r3, [r7, #4]
 80040b0:	4a22      	ldr	r2, [pc, #136]	; (800413c <SystemClock_Config+0xd0>)
 80040b2:	4b22      	ldr	r3, [pc, #136]	; (800413c <SystemClock_Config+0xd0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b1f      	ldr	r3, [pc, #124]	; (800413c <SystemClock_Config+0xd0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040c8:	2301      	movs	r3, #1
 80040ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040d2:	2302      	movs	r3, #2
 80040d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80040dc:	2304      	movs	r3, #4
 80040de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80040e0:	23a8      	movs	r3, #168	; 0xa8
 80040e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040e4:	2302      	movs	r3, #2
 80040e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80040e8:	2307      	movs	r3, #7
 80040ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040ec:	f107 0320 	add.w	r3, r7, #32
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fd fa05 	bl	8001500 <HAL_RCC_OscConfig>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80040fc:	f000 f84c 	bl	8004198 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004100:	230f      	movs	r3, #15
 8004102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004104:	2302      	movs	r3, #2
 8004106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800410c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	2105      	movs	r1, #5
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd fc5e 	bl	80019e0 <HAL_RCC_ClockConfig>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800412a:	f000 f835 	bl	8004198 <Error_Handler>
  }
}
 800412e:	bf00      	nop
 8004130:	3750      	adds	r7, #80	; 0x50
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	40007000 	.word	0x40007000

08004140 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004144:	2200      	movs	r2, #0
 8004146:	2100      	movs	r1, #0
 8004148:	2026      	movs	r0, #38	; 0x26
 800414a:	f7fc ffcc 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800414e:	2026      	movs	r0, #38	; 0x26
 8004150:	f7fc ffe5 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004154:	2200      	movs	r2, #0
 8004156:	2100      	movs	r1, #0
 8004158:	2036      	movs	r0, #54	; 0x36
 800415a:	f7fc ffc4 	bl	80010e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800415e:	2036      	movs	r0, #54	; 0x36
 8004160:	f7fc ffdd 	bl	800111e <HAL_NVIC_EnableIRQ>
}
 8004164:	bf00      	nop
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2){
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a05      	ldr	r2, [pc, #20]	; (800418c <HAL_UART_RxCpltCallback+0x24>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d104      	bne.n	8004184 <HAL_UART_RxCpltCallback+0x1c>
     HAL_UART_Receive_IT(&huart2,&rx2_data,1);
 800417a:	2201      	movs	r2, #1
 800417c:	4904      	ldr	r1, [pc, #16]	; (8004190 <HAL_UART_RxCpltCallback+0x28>)
 800417e:	4805      	ldr	r0, [pc, #20]	; (8004194 <HAL_UART_RxCpltCallback+0x2c>)
 8004180:	f7fe fe99 	bl	8002eb6 <HAL_UART_Receive_IT>
  }
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40004400 	.word	0x40004400
 8004190:	200000a8 	.word	0x200000a8
 8004194:	200002b0 	.word	0x200002b0

08004198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <HAL_MspInit+0x4c>)
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <HAL_MspInit+0x4c>)
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041bc:	6453      	str	r3, [r2, #68]	; 0x44
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <HAL_MspInit+0x4c>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <HAL_MspInit+0x4c>)
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <HAL_MspInit+0x4c>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_MspInit+0x4c>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80041e6:	2007      	movs	r0, #7
 80041e8:	f7fc ff72 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800

080041f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800420a:	e7fe      	b.n	800420a <HardFault_Handler+0x4>

0800420c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004210:	e7fe      	b.n	8004210 <MemManage_Handler+0x4>

08004212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004212:	b480      	push	{r7}
 8004214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004216:	e7fe      	b.n	8004216 <BusFault_Handler+0x4>

08004218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800421c:	e7fe      	b.n	800421c <UsageFault_Handler+0x4>

0800421e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800424c:	f7fc fe30 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}

08004254 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004258:	4802      	ldr	r0, [pc, #8]	; (8004264 <USART2_IRQHandler+0x10>)
 800425a:	f7fe fe81 	bl	8002f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200002b0 	.word	0x200002b0

08004268 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800426c:	4802      	ldr	r0, [pc, #8]	; (8004278 <TIM6_DAC_IRQHandler+0x10>)
 800426e:	f7fd ff34 	bl	80020da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200001b0 	.word	0x200001b0

0800427c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004280:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <SystemInit+0x28>)
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <SystemInit+0x28>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800428c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <SystemInit+0x28>)
 8004292:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004296:	609a      	str	r2, [r3, #8]
#endif
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b096      	sub	sp, #88	; 0x58
 80042ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	609a      	str	r2, [r3, #8]
 80042ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	611a      	str	r2, [r3, #16]
 80042d6:	615a      	str	r2, [r3, #20]
 80042d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	2220      	movs	r2, #32
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fcc7 	bl	8004c74 <memset>

  htim1.Instance = TIM1;
 80042e6:	4b50      	ldr	r3, [pc, #320]	; (8004428 <MX_TIM1_Init+0x180>)
 80042e8:	4a50      	ldr	r2, [pc, #320]	; (800442c <MX_TIM1_Init+0x184>)
 80042ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80042ec:	4b4e      	ldr	r3, [pc, #312]	; (8004428 <MX_TIM1_Init+0x180>)
 80042ee:	22a7      	movs	r2, #167	; 0xa7
 80042f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f2:	4b4d      	ldr	r3, [pc, #308]	; (8004428 <MX_TIM1_Init+0x180>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80042f8:	4b4b      	ldr	r3, [pc, #300]	; (8004428 <MX_TIM1_Init+0x180>)
 80042fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80042fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004300:	4b49      	ldr	r3, [pc, #292]	; (8004428 <MX_TIM1_Init+0x180>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004306:	4b48      	ldr	r3, [pc, #288]	; (8004428 <MX_TIM1_Init+0x180>)
 8004308:	2200      	movs	r2, #0
 800430a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800430c:	4b46      	ldr	r3, [pc, #280]	; (8004428 <MX_TIM1_Init+0x180>)
 800430e:	2200      	movs	r2, #0
 8004310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004312:	4845      	ldr	r0, [pc, #276]	; (8004428 <MX_TIM1_Init+0x180>)
 8004314:	f7fd fd56 	bl	8001dc4 <HAL_TIM_Base_Init>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800431e:	f7ff ff3b 	bl	8004198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004326:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004328:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800432c:	4619      	mov	r1, r3
 800432e:	483e      	ldr	r0, [pc, #248]	; (8004428 <MX_TIM1_Init+0x180>)
 8004330:	f7fe f8a2 	bl	8002478 <HAL_TIM_ConfigClockSource>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800433a:	f7ff ff2d 	bl	8004198 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800433e:	483a      	ldr	r0, [pc, #232]	; (8004428 <MX_TIM1_Init+0x180>)
 8004340:	f7fd fd8f 	bl	8001e62 <HAL_TIM_PWM_Init>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800434a:	f7ff ff25 	bl	8004198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004352:	2300      	movs	r3, #0
 8004354:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800435a:	4619      	mov	r1, r3
 800435c:	4832      	ldr	r0, [pc, #200]	; (8004428 <MX_TIM1_Init+0x180>)
 800435e:	f7fe fc7b 	bl	8002c58 <HAL_TIMEx_MasterConfigSynchronization>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004368:	f7ff ff16 	bl	8004198 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800436c:	2360      	movs	r3, #96	; 0x60
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004374:	2300      	movs	r3, #0
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004378:	2300      	movs	r3, #0
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800437c:	2300      	movs	r3, #0
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004380:	2300      	movs	r3, #0
 8004382:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004384:	2300      	movs	r3, #0
 8004386:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800438c:	2200      	movs	r2, #0
 800438e:	4619      	mov	r1, r3
 8004390:	4825      	ldr	r0, [pc, #148]	; (8004428 <MX_TIM1_Init+0x180>)
 8004392:	f7fd ffab 	bl	80022ec <HAL_TIM_PWM_ConfigChannel>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800439c:	f7ff fefc 	bl	8004198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80043a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043a4:	2204      	movs	r2, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	481f      	ldr	r0, [pc, #124]	; (8004428 <MX_TIM1_Init+0x180>)
 80043aa:	f7fd ff9f 	bl	80022ec <HAL_TIM_PWM_ConfigChannel>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80043b4:	f7ff fef0 	bl	8004198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043bc:	2208      	movs	r2, #8
 80043be:	4619      	mov	r1, r3
 80043c0:	4819      	ldr	r0, [pc, #100]	; (8004428 <MX_TIM1_Init+0x180>)
 80043c2:	f7fd ff93 	bl	80022ec <HAL_TIM_PWM_ConfigChannel>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80043cc:	f7ff fee4 	bl	8004198 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80043d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d4:	220c      	movs	r2, #12
 80043d6:	4619      	mov	r1, r3
 80043d8:	4813      	ldr	r0, [pc, #76]	; (8004428 <MX_TIM1_Init+0x180>)
 80043da:	f7fd ff87 	bl	80022ec <HAL_TIM_PWM_ConfigChannel>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80043e4:	f7ff fed8 	bl	8004198 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004400:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004402:	2300      	movs	r3, #0
 8004404:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	4619      	mov	r1, r3
 800440a:	4807      	ldr	r0, [pc, #28]	; (8004428 <MX_TIM1_Init+0x180>)
 800440c:	f7fe fca0 	bl	8002d50 <HAL_TIMEx_ConfigBreakDeadTime>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004416:	f7ff febf 	bl	8004198 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800441a:	4803      	ldr	r0, [pc, #12]	; (8004428 <MX_TIM1_Init+0x180>)
 800441c:	f000 faca 	bl	80049b4 <HAL_TIM_MspPostInit>

}
 8004420:	bf00      	nop
 8004422:	3758      	adds	r7, #88	; 0x58
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200001f0 	.word	0x200001f0
 800442c:	40010000 	.word	0x40010000

08004430 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08c      	sub	sp, #48	; 0x30
 8004434:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004436:	f107 030c 	add.w	r3, r7, #12
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	2100      	movs	r1, #0
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fc18 	bl	8004c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800444c:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <MX_TIM2_Init+0xa4>)
 800444e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004454:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <MX_TIM2_Init+0xa4>)
 8004456:	2200      	movs	r2, #0
 8004458:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800445a:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <MX_TIM2_Init+0xa4>)
 800445c:	2200      	movs	r2, #0
 800445e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004460:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <MX_TIM2_Init+0xa4>)
 8004462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004466:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <MX_TIM2_Init+0xa4>)
 800446a:	2200      	movs	r2, #0
 800446c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800446e:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <MX_TIM2_Init+0xa4>)
 8004470:	2200      	movs	r2, #0
 8004472:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004474:	2303      	movs	r3, #3
 8004476:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004478:	2300      	movs	r3, #0
 800447a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004488:	2300      	movs	r3, #0
 800448a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800448c:	2301      	movs	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004490:	2300      	movs	r3, #0
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004498:	f107 030c 	add.w	r3, r7, #12
 800449c:	4619      	mov	r1, r3
 800449e:	480d      	ldr	r0, [pc, #52]	; (80044d4 <MX_TIM2_Init+0xa4>)
 80044a0:	f7fd fd52 	bl	8001f48 <HAL_TIM_Encoder_Init>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80044aa:	f7ff fe75 	bl	8004198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4806      	ldr	r0, [pc, #24]	; (80044d4 <MX_TIM2_Init+0xa4>)
 80044bc:	f7fe fbcc 	bl	8002c58 <HAL_TIMEx_MasterConfigSynchronization>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80044c6:	f7ff fe67 	bl	8004198 <Error_Handler>
  }

}
 80044ca:	bf00      	nop
 80044cc:	3730      	adds	r7, #48	; 0x30
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000230 	.word	0x20000230

080044d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	; 0x30
 80044dc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80044de:	f107 030c 	add.w	r3, r7, #12
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fbc4 	bl	8004c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80044f4:	4b20      	ldr	r3, [pc, #128]	; (8004578 <MX_TIM3_Init+0xa0>)
 80044f6:	4a21      	ldr	r2, [pc, #132]	; (800457c <MX_TIM3_Init+0xa4>)
 80044f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80044fa:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <MX_TIM3_Init+0xa0>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800450c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800450e:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004510:	2200      	movs	r2, #0
 8004512:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004514:	4b18      	ldr	r3, [pc, #96]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004516:	2200      	movs	r2, #0
 8004518:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800451a:	2303      	movs	r3, #3
 800451c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004532:	2301      	movs	r3, #1
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004536:	2300      	movs	r3, #0
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800453e:	f107 030c 	add.w	r3, r7, #12
 8004542:	4619      	mov	r1, r3
 8004544:	480c      	ldr	r0, [pc, #48]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004546:	f7fd fcff 	bl	8001f48 <HAL_TIM_Encoder_Init>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004550:	f7ff fe22 	bl	8004198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004554:	2300      	movs	r3, #0
 8004556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4805      	ldr	r0, [pc, #20]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004562:	f7fe fb79 	bl	8002c58 <HAL_TIMEx_MasterConfigSynchronization>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800456c:	f7ff fe14 	bl	8004198 <Error_Handler>
  }

}
 8004570:	bf00      	nop
 8004572:	3730      	adds	r7, #48	; 0x30
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000170 	.word	0x20000170
 800457c:	40000400 	.word	0x40000400

08004580 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08c      	sub	sp, #48	; 0x30
 8004584:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004586:	f107 030c 	add.w	r3, r7, #12
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fb70 	bl	8004c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <MX_TIM4_Init+0xa0>)
 800459e:	4a21      	ldr	r2, [pc, #132]	; (8004624 <MX_TIM4_Init+0xa4>)
 80045a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80045c2:	2303      	movs	r3, #3
 80045c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80045ca:	2301      	movs	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80045da:	2301      	movs	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80045de:	2300      	movs	r3, #0
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80045e6:	f107 030c 	add.w	r3, r7, #12
 80045ea:	4619      	mov	r1, r3
 80045ec:	480c      	ldr	r0, [pc, #48]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045ee:	f7fd fcab 	bl	8001f48 <HAL_TIM_Encoder_Init>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80045f8:	f7ff fdce 	bl	8004198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045fc:	2300      	movs	r3, #0
 80045fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	4619      	mov	r1, r3
 8004608:	4805      	ldr	r0, [pc, #20]	; (8004620 <MX_TIM4_Init+0xa0>)
 800460a:	f7fe fb25 	bl	8002c58 <HAL_TIMEx_MasterConfigSynchronization>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004614:	f7ff fdc0 	bl	8004198 <Error_Handler>
  }

}
 8004618:	bf00      	nop
 800461a:	3730      	adds	r7, #48	; 0x30
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	200000f0 	.word	0x200000f0
 8004624:	40000800 	.word	0x40000800

08004628 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08c      	sub	sp, #48	; 0x30
 800462c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800462e:	f107 030c 	add.w	r3, r7, #12
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fb1c 	bl	8004c74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8004644:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <MX_TIM5_Init+0xa0>)
 8004646:	4a21      	ldr	r2, [pc, #132]	; (80046cc <MX_TIM5_Init+0xa4>)
 8004648:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800464a:	4b1f      	ldr	r3, [pc, #124]	; (80046c8 <MX_TIM5_Init+0xa0>)
 800464c:	2200      	movs	r2, #0
 800464e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004650:	4b1d      	ldr	r3, [pc, #116]	; (80046c8 <MX_TIM5_Init+0xa0>)
 8004652:	2200      	movs	r2, #0
 8004654:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <MX_TIM5_Init+0xa0>)
 8004658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800465c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800465e:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <MX_TIM5_Init+0xa0>)
 8004660:	2200      	movs	r2, #0
 8004662:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004664:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <MX_TIM5_Init+0xa0>)
 8004666:	2200      	movs	r2, #0
 8004668:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800466a:	2303      	movs	r3, #3
 800466c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004672:	2301      	movs	r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004676:	2300      	movs	r3, #0
 8004678:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800467e:	2300      	movs	r3, #0
 8004680:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004682:	2301      	movs	r3, #1
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004686:	2300      	movs	r3, #0
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800468a:	2300      	movs	r3, #0
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800468e:	f107 030c 	add.w	r3, r7, #12
 8004692:	4619      	mov	r1, r3
 8004694:	480c      	ldr	r0, [pc, #48]	; (80046c8 <MX_TIM5_Init+0xa0>)
 8004696:	f7fd fc57 	bl	8001f48 <HAL_TIM_Encoder_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80046a0:	f7ff fd7a 	bl	8004198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046a4:	2300      	movs	r3, #0
 80046a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4805      	ldr	r0, [pc, #20]	; (80046c8 <MX_TIM5_Init+0xa0>)
 80046b2:	f7fe fad1 	bl	8002c58 <HAL_TIMEx_MasterConfigSynchronization>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80046bc:	f7ff fd6c 	bl	8004198 <Error_Handler>
  }

}
 80046c0:	bf00      	nop
 80046c2:	3730      	adds	r7, #48	; 0x30
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000130 	.word	0x20000130
 80046cc:	40000c00 	.word	0x40000c00

080046d0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046d6:	463b      	mov	r3, r7
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <MX_TIM6_Init+0x64>)
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <MX_TIM6_Init+0x68>)
 80046e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4199;
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <MX_TIM6_Init+0x64>)
 80046e6:	f241 0267 	movw	r2, #4199	; 0x1067
 80046ea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <MX_TIM6_Init+0x64>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <MX_TIM6_Init+0x64>)
 80046f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80046f8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046fa:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <MX_TIM6_Init+0x64>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004700:	480c      	ldr	r0, [pc, #48]	; (8004734 <MX_TIM6_Init+0x64>)
 8004702:	f7fd fb5f 	bl	8001dc4 <HAL_TIM_Base_Init>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800470c:	f7ff fd44 	bl	8004198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004710:	2300      	movs	r3, #0
 8004712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004714:	2300      	movs	r3, #0
 8004716:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004718:	463b      	mov	r3, r7
 800471a:	4619      	mov	r1, r3
 800471c:	4805      	ldr	r0, [pc, #20]	; (8004734 <MX_TIM6_Init+0x64>)
 800471e:	f7fe fa9b 	bl	8002c58 <HAL_TIMEx_MasterConfigSynchronization>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004728:	f7ff fd36 	bl	8004198 <Error_Handler>
  }

}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	200001b0 	.word	0x200001b0
 8004738:	40001000 	.word	0x40001000

0800473c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <HAL_TIM_Base_MspInit+0x64>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10e      	bne.n	800476c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	4a14      	ldr	r2, [pc, #80]	; (80047a4 <HAL_TIM_Base_MspInit+0x68>)
 8004754:	4b13      	ldr	r3, [pc, #76]	; (80047a4 <HAL_TIM_Base_MspInit+0x68>)
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6453      	str	r3, [r2, #68]	; 0x44
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <HAL_TIM_Base_MspInit+0x68>)
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800476a:	e012      	b.n	8004792 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0d      	ldr	r2, [pc, #52]	; (80047a8 <HAL_TIM_Base_MspInit+0x6c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10d      	bne.n	8004792 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	4a0a      	ldr	r2, [pc, #40]	; (80047a4 <HAL_TIM_Base_MspInit+0x68>)
 800477c:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_TIM_Base_MspInit+0x68>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f043 0310 	orr.w	r3, r3, #16
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
 8004786:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <HAL_TIM_Base_MspInit+0x68>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40001000 	.word	0x40001000

080047ac <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b090      	sub	sp, #64	; 0x40
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047cc:	d14a      	bne.n	8004864 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d2:	4a71      	ldr	r2, [pc, #452]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80047d4:	4b70      	ldr	r3, [pc, #448]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b6e      	ldr	r3, [pc, #440]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
 80047ee:	4a6a      	ldr	r2, [pc, #424]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80047f0:	4b69      	ldr	r3, [pc, #420]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	6313      	str	r3, [r2, #48]	; 0x30
 80047fa:	4b67      	ldr	r3, [pc, #412]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	4a63      	ldr	r2, [pc, #396]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800480c:	4b62      	ldr	r3, [pc, #392]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	f043 0302 	orr.w	r3, r3, #2
 8004814:	6313      	str	r3, [r2, #48]	; 0x30
 8004816:	4b60      	ldr	r3, [pc, #384]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004822:	2320      	movs	r3, #32
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004826:	2302      	movs	r3, #2
 8004828:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482a:	2300      	movs	r3, #0
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482e:	2300      	movs	r3, #0
 8004830:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004832:	2301      	movs	r3, #1
 8004834:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800483a:	4619      	mov	r1, r3
 800483c:	4857      	ldr	r0, [pc, #348]	; (800499c <HAL_TIM_Encoder_MspInit+0x1f0>)
 800483e:	f7fc fcab 	bl	8001198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004842:	2308      	movs	r3, #8
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004846:	2302      	movs	r3, #2
 8004848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484a:	2300      	movs	r3, #0
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484e:	2300      	movs	r3, #0
 8004850:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004852:	2301      	movs	r3, #1
 8004854:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800485a:	4619      	mov	r1, r3
 800485c:	4850      	ldr	r0, [pc, #320]	; (80049a0 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800485e:	f7fc fc9b 	bl	8001198 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004862:	e095      	b.n	8004990 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a4e      	ldr	r2, [pc, #312]	; (80049a4 <HAL_TIM_Encoder_MspInit+0x1f8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d12c      	bne.n	80048c8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	4a49      	ldr	r2, [pc, #292]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004874:	4b48      	ldr	r3, [pc, #288]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b46      	ldr	r3, [pc, #280]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	4a42      	ldr	r2, [pc, #264]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004890:	4b41      	ldr	r3, [pc, #260]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b3f      	ldr	r3, [pc, #252]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	61bb      	str	r3, [r7, #24]
 80048a4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048a6:	23c0      	movs	r3, #192	; 0xc0
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048aa:	2302      	movs	r3, #2
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b2:	2300      	movs	r3, #0
 80048b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048b6:	2302      	movs	r3, #2
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048be:	4619      	mov	r1, r3
 80048c0:	4836      	ldr	r0, [pc, #216]	; (800499c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80048c2:	f7fc fc69 	bl	8001198 <HAL_GPIO_Init>
}
 80048c6:	e063      	b.n	8004990 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a36      	ldr	r2, [pc, #216]	; (80049a8 <HAL_TIM_Encoder_MspInit+0x1fc>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d12d      	bne.n	800492e <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	4a30      	ldr	r2, [pc, #192]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80048d8:	4b2f      	ldr	r3, [pc, #188]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	6413      	str	r3, [r2, #64]	; 0x40
 80048e2:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	4a29      	ldr	r2, [pc, #164]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80048f4:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	f043 0308 	orr.w	r3, r3, #8
 80048fc:	6313      	str	r3, [r2, #48]	; 0x30
 80048fe:	4b26      	ldr	r3, [pc, #152]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800490a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004910:	2302      	movs	r3, #2
 8004912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004914:	2300      	movs	r3, #0
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004918:	2300      	movs	r3, #0
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800491c:	2302      	movs	r3, #2
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004924:	4619      	mov	r1, r3
 8004926:	4821      	ldr	r0, [pc, #132]	; (80049ac <HAL_TIM_Encoder_MspInit+0x200>)
 8004928:	f7fc fc36 	bl	8001198 <HAL_GPIO_Init>
}
 800492c:	e030      	b.n	8004990 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d12b      	bne.n	8004990 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	4a16      	ldr	r2, [pc, #88]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800493e:	4b16      	ldr	r3, [pc, #88]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f043 0308 	orr.w	r3, r3, #8
 8004946:	6413      	str	r3, [r2, #64]	; 0x40
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	4a0f      	ldr	r2, [pc, #60]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6313      	str	r3, [r2, #48]	; 0x30
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004970:	2303      	movs	r3, #3
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004974:	2302      	movs	r3, #2
 8004976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004978:	2300      	movs	r3, #0
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800497c:	2300      	movs	r3, #0
 800497e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004980:	2302      	movs	r3, #2
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004988:	4619      	mov	r1, r3
 800498a:	4804      	ldr	r0, [pc, #16]	; (800499c <HAL_TIM_Encoder_MspInit+0x1f0>)
 800498c:	f7fc fc04 	bl	8001198 <HAL_GPIO_Init>
}
 8004990:	bf00      	nop
 8004992:	3740      	adds	r7, #64	; 0x40
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	40020000 	.word	0x40020000
 80049a0:	40020400 	.word	0x40020400
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40020c00 	.word	0x40020c00
 80049b0:	40000c00 	.word	0x40000c00

080049b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049bc:	f107 030c 	add.w	r3, r7, #12
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	60da      	str	r2, [r3, #12]
 80049ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a12      	ldr	r2, [pc, #72]	; (8004a1c <HAL_TIM_MspPostInit+0x68>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d11e      	bne.n	8004a14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	4a11      	ldr	r2, [pc, #68]	; (8004a20 <HAL_TIM_MspPostInit+0x6c>)
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <HAL_TIM_MspPostInit+0x6c>)
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	f043 0310 	orr.w	r3, r3, #16
 80049e4:	6313      	str	r3, [r2, #48]	; 0x30
 80049e6:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <HAL_TIM_MspPostInit+0x6c>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80049f2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80049f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f8:	2302      	movs	r3, #2
 80049fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a04:	2301      	movs	r3, #1
 8004a06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4805      	ldr	r0, [pc, #20]	; (8004a24 <HAL_TIM_MspPostInit+0x70>)
 8004a10:	f7fc fbc2 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a14:	bf00      	nop
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40021000 	.word	0x40021000

08004a28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004a2c:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <MX_USART2_UART_Init+0x4c>)
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <MX_USART2_UART_Init+0x50>)
 8004a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <MX_USART2_UART_Init+0x4c>)
 8004a34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a3a:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <MX_USART2_UART_Init+0x4c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a40:	4b0c      	ldr	r3, [pc, #48]	; (8004a74 <MX_USART2_UART_Init+0x4c>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <MX_USART2_UART_Init+0x4c>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <MX_USART2_UART_Init+0x4c>)
 8004a4e:	220c      	movs	r2, #12
 8004a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <MX_USART2_UART_Init+0x4c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <MX_USART2_UART_Init+0x4c>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a5e:	4805      	ldr	r0, [pc, #20]	; (8004a74 <MX_USART2_UART_Init+0x4c>)
 8004a60:	f7fe f9dc 	bl	8002e1c <HAL_UART_Init>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004a6a:	f7ff fb95 	bl	8004198 <Error_Handler>
  }

}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	200002b0 	.word	0x200002b0
 8004a78:	40004400 	.word	0x40004400

08004a7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <MX_USART3_UART_Init+0x4c>)
 8004a82:	4a12      	ldr	r2, [pc, #72]	; (8004acc <MX_USART3_UART_Init+0x50>)
 8004a84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <MX_USART3_UART_Init+0x4c>)
 8004a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004a8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <MX_USART3_UART_Init+0x4c>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <MX_USART3_UART_Init+0x4c>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <MX_USART3_UART_Init+0x4c>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <MX_USART3_UART_Init+0x4c>)
 8004aa2:	220c      	movs	r2, #12
 8004aa4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <MX_USART3_UART_Init+0x4c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <MX_USART3_UART_Init+0x4c>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004ab2:	4805      	ldr	r0, [pc, #20]	; (8004ac8 <MX_USART3_UART_Init+0x4c>)
 8004ab4:	f7fe f9b2 	bl	8002e1c <HAL_UART_Init>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004abe:	f7ff fb6b 	bl	8004198 <Error_Handler>
  }

}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000270 	.word	0x20000270
 8004acc:	40004800 	.word	0x40004800

08004ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	; 0x30
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ad8:	f107 031c 	add.w	r3, r7, #28
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	60da      	str	r2, [r3, #12]
 8004ae6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a32      	ldr	r2, [pc, #200]	; (8004bb8 <HAL_UART_MspInit+0xe8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d12c      	bne.n	8004b4c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	4a31      	ldr	r2, [pc, #196]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004af8:	4b30      	ldr	r3, [pc, #192]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b00:	6413      	str	r3, [r2, #64]	; 0x40
 8004b02:	4b2e      	ldr	r3, [pc, #184]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	4a2a      	ldr	r2, [pc, #168]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b14:	4b29      	ldr	r3, [pc, #164]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b1e:	4b27      	ldr	r3, [pc, #156]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b36:	2303      	movs	r3, #3
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b3a:	2307      	movs	r3, #7
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b3e:	f107 031c 	add.w	r3, r7, #28
 8004b42:	4619      	mov	r1, r3
 8004b44:	481e      	ldr	r0, [pc, #120]	; (8004bc0 <HAL_UART_MspInit+0xf0>)
 8004b46:	f7fc fb27 	bl	8001198 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004b4a:	e031      	b.n	8004bb0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <HAL_UART_MspInit+0xf4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d12c      	bne.n	8004bb0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b5c:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b64:	6413      	str	r3, [r2, #64]	; 0x40
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	f043 0302 	orr.w	r3, r3, #2
 8004b80:	6313      	str	r3, [r2, #48]	; 0x30
 8004b82:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <HAL_UART_MspInit+0xec>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b94:	2302      	movs	r3, #2
 8004b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ba0:	2307      	movs	r3, #7
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba4:	f107 031c 	add.w	r3, r7, #28
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4807      	ldr	r0, [pc, #28]	; (8004bc8 <HAL_UART_MspInit+0xf8>)
 8004bac:	f7fc faf4 	bl	8001198 <HAL_GPIO_Init>
}
 8004bb0:	bf00      	nop
 8004bb2:	3730      	adds	r7, #48	; 0x30
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40004400 	.word	0x40004400
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	40020000 	.word	0x40020000
 8004bc4:	40004800 	.word	0x40004800
 8004bc8:	40020400 	.word	0x40020400

08004bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bd2:	e003      	b.n	8004bdc <LoopCopyDataInit>

08004bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bda:	3104      	adds	r1, #4

08004bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004bdc:	480b      	ldr	r0, [pc, #44]	; (8004c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004be4:	d3f6      	bcc.n	8004bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8004be6:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004be8:	e002      	b.n	8004bf0 <LoopFillZerobss>

08004bea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004bec:	f842 3b04 	str.w	r3, [r2], #4

08004bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bf4:	d3f9      	bcc.n	8004bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bf6:	f7ff fb41 	bl	800427c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bfa:	f000 f817 	bl	8004c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bfe:	f7ff f94d 	bl	8003e9c <main>
  bx  lr    
 8004c02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c08:	080050f0 	.word	0x080050f0
  ldr  r0, =_sdata
 8004c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c10:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8004c14:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8004c18:	200002f0 	.word	0x200002f0

08004c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c1c:	e7fe      	b.n	8004c1c <ADC_IRQHandler>
	...

08004c20 <__errno>:
 8004c20:	4b01      	ldr	r3, [pc, #4]	; (8004c28 <__errno+0x8>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000024 	.word	0x20000024

08004c2c <__libc_init_array>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4e0d      	ldr	r6, [pc, #52]	; (8004c64 <__libc_init_array+0x38>)
 8004c30:	4c0d      	ldr	r4, [pc, #52]	; (8004c68 <__libc_init_array+0x3c>)
 8004c32:	1ba4      	subs	r4, r4, r6
 8004c34:	10a4      	asrs	r4, r4, #2
 8004c36:	2500      	movs	r5, #0
 8004c38:	42a5      	cmp	r5, r4
 8004c3a:	d109      	bne.n	8004c50 <__libc_init_array+0x24>
 8004c3c:	4e0b      	ldr	r6, [pc, #44]	; (8004c6c <__libc_init_array+0x40>)
 8004c3e:	4c0c      	ldr	r4, [pc, #48]	; (8004c70 <__libc_init_array+0x44>)
 8004c40:	f000 fa1a 	bl	8005078 <_init>
 8004c44:	1ba4      	subs	r4, r4, r6
 8004c46:	10a4      	asrs	r4, r4, #2
 8004c48:	2500      	movs	r5, #0
 8004c4a:	42a5      	cmp	r5, r4
 8004c4c:	d105      	bne.n	8004c5a <__libc_init_array+0x2e>
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c54:	4798      	blx	r3
 8004c56:	3501      	adds	r5, #1
 8004c58:	e7ee      	b.n	8004c38 <__libc_init_array+0xc>
 8004c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c5e:	4798      	blx	r3
 8004c60:	3501      	adds	r5, #1
 8004c62:	e7f2      	b.n	8004c4a <__libc_init_array+0x1e>
 8004c64:	080050e8 	.word	0x080050e8
 8004c68:	080050e8 	.word	0x080050e8
 8004c6c:	080050e8 	.word	0x080050e8
 8004c70:	080050ec 	.word	0x080050ec

08004c74 <memset>:
 8004c74:	4402      	add	r2, r0
 8004c76:	4603      	mov	r3, r0
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d100      	bne.n	8004c7e <memset+0xa>
 8004c7c:	4770      	bx	lr
 8004c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c82:	e7f9      	b.n	8004c78 <memset+0x4>
 8004c84:	0000      	movs	r0, r0
	...

08004c88 <exp>:
 8004c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c8a:	ed2d 8b02 	vpush	{d8}
 8004c8e:	4e38      	ldr	r6, [pc, #224]	; (8004d70 <exp+0xe8>)
 8004c90:	b08b      	sub	sp, #44	; 0x2c
 8004c92:	ec55 4b10 	vmov	r4, r5, d0
 8004c96:	f000 f873 	bl	8004d80 <__ieee754_exp>
 8004c9a:	f996 3000 	ldrsb.w	r3, [r6]
 8004c9e:	eeb0 8a40 	vmov.f32	s16, s0
 8004ca2:	eef0 8a60 	vmov.f32	s17, s1
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	d02c      	beq.n	8004d04 <exp+0x7c>
 8004caa:	ec45 4b10 	vmov	d0, r4, r5
 8004cae:	f000 f9d9 	bl	8005064 <finite>
 8004cb2:	b338      	cbz	r0, 8004d04 <exp+0x7c>
 8004cb4:	a32a      	add	r3, pc, #168	; (adr r3, 8004d60 <exp+0xd8>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	4620      	mov	r0, r4
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	f7fb fecb 	bl	8000a58 <__aeabi_dcmpgt>
 8004cc2:	4607      	mov	r7, r0
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d030      	beq.n	8004d2a <exp+0xa2>
 8004cc8:	2303      	movs	r3, #3
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	4b29      	ldr	r3, [pc, #164]	; (8004d74 <exp+0xec>)
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	9308      	str	r3, [sp, #32]
 8004cd4:	f996 3000 	ldrsb.w	r3, [r6]
 8004cd8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004cdc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004ce0:	b9c3      	cbnz	r3, 8004d14 <exp+0x8c>
 8004ce2:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <exp+0xf0>)
 8004ce4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cec:	4668      	mov	r0, sp
 8004cee:	f000 f9c1 	bl	8005074 <matherr>
 8004cf2:	b1a8      	cbz	r0, 8004d20 <exp+0x98>
 8004cf4:	9b08      	ldr	r3, [sp, #32]
 8004cf6:	b11b      	cbz	r3, 8004d00 <exp+0x78>
 8004cf8:	f7ff ff92 	bl	8004c20 <__errno>
 8004cfc:	9b08      	ldr	r3, [sp, #32]
 8004cfe:	6003      	str	r3, [r0, #0]
 8004d00:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004d04:	eeb0 0a48 	vmov.f32	s0, s16
 8004d08:	eef0 0a68 	vmov.f32	s1, s17
 8004d0c:	b00b      	add	sp, #44	; 0x2c
 8004d0e:	ecbd 8b02 	vpop	{d8}
 8004d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d14:	4919      	ldr	r1, [pc, #100]	; (8004d7c <exp+0xf4>)
 8004d16:	2000      	movs	r0, #0
 8004d18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d1e5      	bne.n	8004cec <exp+0x64>
 8004d20:	f7ff ff7e 	bl	8004c20 <__errno>
 8004d24:	2322      	movs	r3, #34	; 0x22
 8004d26:	6003      	str	r3, [r0, #0]
 8004d28:	e7e4      	b.n	8004cf4 <exp+0x6c>
 8004d2a:	a30f      	add	r3, pc, #60	; (adr r3, 8004d68 <exp+0xe0>)
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	4620      	mov	r0, r4
 8004d32:	4629      	mov	r1, r5
 8004d34:	f7fb fe72 	bl	8000a1c <__aeabi_dcmplt>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	d0e3      	beq.n	8004d04 <exp+0x7c>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <exp+0xec>)
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2300      	movs	r3, #0
 8004d48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d4c:	9708      	str	r7, [sp, #32]
 8004d4e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004d52:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004d56:	f996 3000 	ldrsb.w	r3, [r6]
 8004d5a:	e7df      	b.n	8004d1c <exp+0x94>
 8004d5c:	f3af 8000 	nop.w
 8004d60:	fefa39ef 	.word	0xfefa39ef
 8004d64:	40862e42 	.word	0x40862e42
 8004d68:	d52d3051 	.word	0xd52d3051
 8004d6c:	c0874910 	.word	0xc0874910
 8004d70:	20000088 	.word	0x20000088
 8004d74:	080050a8 	.word	0x080050a8
 8004d78:	47efffff 	.word	0x47efffff
 8004d7c:	7ff00000 	.word	0x7ff00000

08004d80 <__ieee754_exp>:
 8004d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	ec55 4b10 	vmov	r4, r5, d0
 8004d88:	4aad      	ldr	r2, [pc, #692]	; (8005040 <__ieee754_exp+0x2c0>)
 8004d8a:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8004d8e:	4297      	cmp	r7, r2
 8004d90:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8004d94:	f240 80af 	bls.w	8004ef6 <__ieee754_exp+0x176>
 8004d98:	4aaa      	ldr	r2, [pc, #680]	; (8005044 <__ieee754_exp+0x2c4>)
 8004d9a:	4297      	cmp	r7, r2
 8004d9c:	d915      	bls.n	8004dca <__ieee754_exp+0x4a>
 8004d9e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004da2:	4323      	orrs	r3, r4
 8004da4:	d009      	beq.n	8004dba <__ieee754_exp+0x3a>
 8004da6:	ee10 2a10 	vmov	r2, s0
 8004daa:	462b      	mov	r3, r5
 8004dac:	4620      	mov	r0, r4
 8004dae:	4629      	mov	r1, r5
 8004db0:	f7fb fa10 	bl	80001d4 <__adddf3>
 8004db4:	4604      	mov	r4, r0
 8004db6:	460d      	mov	r5, r1
 8004db8:	e002      	b.n	8004dc0 <__ieee754_exp+0x40>
 8004dba:	b10e      	cbz	r6, 8004dc0 <__ieee754_exp+0x40>
 8004dbc:	2400      	movs	r4, #0
 8004dbe:	2500      	movs	r5, #0
 8004dc0:	ec45 4b10 	vmov	d0, r4, r5
 8004dc4:	b003      	add	sp, #12
 8004dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dca:	a387      	add	r3, pc, #540	; (adr r3, 8004fe8 <__ieee754_exp+0x268>)
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	ee10 0a10 	vmov	r0, s0
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f7fb fe3f 	bl	8000a58 <__aeabi_dcmpgt>
 8004dda:	b138      	cbz	r0, 8004dec <__ieee754_exp+0x6c>
 8004ddc:	a384      	add	r3, pc, #528	; (adr r3, 8004ff0 <__ieee754_exp+0x270>)
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	f7fb fba7 	bl	8000538 <__aeabi_dmul>
 8004dea:	e7e3      	b.n	8004db4 <__ieee754_exp+0x34>
 8004dec:	a382      	add	r3, pc, #520	; (adr r3, 8004ff8 <__ieee754_exp+0x278>)
 8004dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df2:	4620      	mov	r0, r4
 8004df4:	4629      	mov	r1, r5
 8004df6:	f7fb fe11 	bl	8000a1c <__aeabi_dcmplt>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	d1de      	bne.n	8004dbc <__ieee754_exp+0x3c>
 8004dfe:	4b92      	ldr	r3, [pc, #584]	; (8005048 <__ieee754_exp+0x2c8>)
 8004e00:	429f      	cmp	r7, r3
 8004e02:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 8004e06:	f200 808e 	bhi.w	8004f26 <__ieee754_exp+0x1a6>
 8004e0a:	4b90      	ldr	r3, [pc, #576]	; (800504c <__ieee754_exp+0x2cc>)
 8004e0c:	443b      	add	r3, r7
 8004e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e12:	4620      	mov	r0, r4
 8004e14:	4629      	mov	r1, r5
 8004e16:	f7fb f9db 	bl	80001d0 <__aeabi_dsub>
 8004e1a:	4b8d      	ldr	r3, [pc, #564]	; (8005050 <__ieee754_exp+0x2d0>)
 8004e1c:	441f      	add	r7, r3
 8004e1e:	ed97 7b00 	vldr	d7, [r7]
 8004e22:	ed8d 7b00 	vstr	d7, [sp]
 8004e26:	4682      	mov	sl, r0
 8004e28:	f1c6 0001 	rsb	r0, r6, #1
 8004e2c:	468b      	mov	fp, r1
 8004e2e:	1b86      	subs	r6, r0, r6
 8004e30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e34:	4650      	mov	r0, sl
 8004e36:	4659      	mov	r1, fp
 8004e38:	f7fb f9ca 	bl	80001d0 <__aeabi_dsub>
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	460d      	mov	r5, r1
 8004e40:	4622      	mov	r2, r4
 8004e42:	462b      	mov	r3, r5
 8004e44:	4620      	mov	r0, r4
 8004e46:	4629      	mov	r1, r5
 8004e48:	f7fb fb76 	bl	8000538 <__aeabi_dmul>
 8004e4c:	a36c      	add	r3, pc, #432	; (adr r3, 8005000 <__ieee754_exp+0x280>)
 8004e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e52:	4680      	mov	r8, r0
 8004e54:	4689      	mov	r9, r1
 8004e56:	f7fb fb6f 	bl	8000538 <__aeabi_dmul>
 8004e5a:	a36b      	add	r3, pc, #428	; (adr r3, 8005008 <__ieee754_exp+0x288>)
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f7fb f9b6 	bl	80001d0 <__aeabi_dsub>
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	f7fb fb66 	bl	8000538 <__aeabi_dmul>
 8004e6c:	a368      	add	r3, pc, #416	; (adr r3, 8005010 <__ieee754_exp+0x290>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f7fb f9af 	bl	80001d4 <__adddf3>
 8004e76:	4642      	mov	r2, r8
 8004e78:	464b      	mov	r3, r9
 8004e7a:	f7fb fb5d 	bl	8000538 <__aeabi_dmul>
 8004e7e:	a366      	add	r3, pc, #408	; (adr r3, 8005018 <__ieee754_exp+0x298>)
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f7fb f9a4 	bl	80001d0 <__aeabi_dsub>
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	f7fb fb54 	bl	8000538 <__aeabi_dmul>
 8004e90:	a363      	add	r3, pc, #396	; (adr r3, 8005020 <__ieee754_exp+0x2a0>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f7fb f99d 	bl	80001d4 <__adddf3>
 8004e9a:	4642      	mov	r2, r8
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	f7fb fb4b 	bl	8000538 <__aeabi_dmul>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	f7fb f991 	bl	80001d0 <__aeabi_dsub>
 8004eae:	4680      	mov	r8, r0
 8004eb0:	4689      	mov	r9, r1
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	d162      	bne.n	8004f84 <__ieee754_exp+0x204>
 8004ebe:	f7fb fb3b 	bl	8000538 <__aeabi_dmul>
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	460f      	mov	r7, r1
 8004ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ecc:	4640      	mov	r0, r8
 8004ece:	4649      	mov	r1, r9
 8004ed0:	f7fb f97e 	bl	80001d0 <__aeabi_dsub>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4630      	mov	r0, r6
 8004eda:	4639      	mov	r1, r7
 8004edc:	f7fb fc56 	bl	800078c <__aeabi_ddiv>
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	462b      	mov	r3, r5
 8004ee4:	f7fb f974 	bl	80001d0 <__aeabi_dsub>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	2000      	movs	r0, #0
 8004eee:	4959      	ldr	r1, [pc, #356]	; (8005054 <__ieee754_exp+0x2d4>)
 8004ef0:	f7fb f96e 	bl	80001d0 <__aeabi_dsub>
 8004ef4:	e75e      	b.n	8004db4 <__ieee754_exp+0x34>
 8004ef6:	4b58      	ldr	r3, [pc, #352]	; (8005058 <__ieee754_exp+0x2d8>)
 8004ef8:	429f      	cmp	r7, r3
 8004efa:	d880      	bhi.n	8004dfe <__ieee754_exp+0x7e>
 8004efc:	4b57      	ldr	r3, [pc, #348]	; (800505c <__ieee754_exp+0x2dc>)
 8004efe:	429f      	cmp	r7, r3
 8004f00:	d83c      	bhi.n	8004f7c <__ieee754_exp+0x1fc>
 8004f02:	a33b      	add	r3, pc, #236	; (adr r3, 8004ff0 <__ieee754_exp+0x270>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	ee10 0a10 	vmov	r0, s0
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f7fb f961 	bl	80001d4 <__adddf3>
 8004f12:	2200      	movs	r2, #0
 8004f14:	4b4f      	ldr	r3, [pc, #316]	; (8005054 <__ieee754_exp+0x2d4>)
 8004f16:	f7fb fd9f 	bl	8000a58 <__aeabi_dcmpgt>
 8004f1a:	b388      	cbz	r0, 8004f80 <__ieee754_exp+0x200>
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4b4d      	ldr	r3, [pc, #308]	; (8005054 <__ieee754_exp+0x2d4>)
 8004f20:	4620      	mov	r0, r4
 8004f22:	4629      	mov	r1, r5
 8004f24:	e744      	b.n	8004db0 <__ieee754_exp+0x30>
 8004f26:	4e4e      	ldr	r6, [pc, #312]	; (8005060 <__ieee754_exp+0x2e0>)
 8004f28:	a33f      	add	r3, pc, #252	; (adr r3, 8005028 <__ieee754_exp+0x2a8>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	443e      	add	r6, r7
 8004f30:	4620      	mov	r0, r4
 8004f32:	4629      	mov	r1, r5
 8004f34:	f7fb fb00 	bl	8000538 <__aeabi_dmul>
 8004f38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f3c:	f7fb f94a 	bl	80001d4 <__adddf3>
 8004f40:	f7fb fd94 	bl	8000a6c <__aeabi_d2iz>
 8004f44:	4606      	mov	r6, r0
 8004f46:	f7fb fa91 	bl	800046c <__aeabi_i2d>
 8004f4a:	a339      	add	r3, pc, #228	; (adr r3, 8005030 <__ieee754_exp+0x2b0>)
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	4680      	mov	r8, r0
 8004f52:	4689      	mov	r9, r1
 8004f54:	f7fb faf0 	bl	8000538 <__aeabi_dmul>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7fb f936 	bl	80001d0 <__aeabi_dsub>
 8004f64:	a334      	add	r3, pc, #208	; (adr r3, 8005038 <__ieee754_exp+0x2b8>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	4682      	mov	sl, r0
 8004f6c:	468b      	mov	fp, r1
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4649      	mov	r1, r9
 8004f72:	f7fb fae1 	bl	8000538 <__aeabi_dmul>
 8004f76:	e9cd 0100 	strd	r0, r1, [sp]
 8004f7a:	e759      	b.n	8004e30 <__ieee754_exp+0xb0>
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	e75f      	b.n	8004e40 <__ieee754_exp+0xc0>
 8004f80:	4606      	mov	r6, r0
 8004f82:	e75d      	b.n	8004e40 <__ieee754_exp+0xc0>
 8004f84:	f7fb fad8 	bl	8000538 <__aeabi_dmul>
 8004f88:	4642      	mov	r2, r8
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	464b      	mov	r3, r9
 8004f90:	2000      	movs	r0, #0
 8004f92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004f96:	f7fb f91b 	bl	80001d0 <__aeabi_dsub>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f7fb fbf3 	bl	800078c <__aeabi_ddiv>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fae:	f7fb f90f 	bl	80001d0 <__aeabi_dsub>
 8004fb2:	4652      	mov	r2, sl
 8004fb4:	465b      	mov	r3, fp
 8004fb6:	f7fb f90b 	bl	80001d0 <__aeabi_dsub>
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4925      	ldr	r1, [pc, #148]	; (8005054 <__ieee754_exp+0x2d4>)
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f7fb f905 	bl	80001d0 <__aeabi_dsub>
 8004fc6:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8004fca:	429e      	cmp	r6, r3
 8004fcc:	db02      	blt.n	8004fd4 <__ieee754_exp+0x254>
 8004fce:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8004fd2:	e6ef      	b.n	8004db4 <__ieee754_exp+0x34>
 8004fd4:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8004fd8:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8004fe2:	e700      	b.n	8004de6 <__ieee754_exp+0x66>
 8004fe4:	f3af 8000 	nop.w
 8004fe8:	fefa39ef 	.word	0xfefa39ef
 8004fec:	40862e42 	.word	0x40862e42
 8004ff0:	8800759c 	.word	0x8800759c
 8004ff4:	7e37e43c 	.word	0x7e37e43c
 8004ff8:	d52d3051 	.word	0xd52d3051
 8004ffc:	c0874910 	.word	0xc0874910
 8005000:	72bea4d0 	.word	0x72bea4d0
 8005004:	3e663769 	.word	0x3e663769
 8005008:	c5d26bf1 	.word	0xc5d26bf1
 800500c:	3ebbbd41 	.word	0x3ebbbd41
 8005010:	af25de2c 	.word	0xaf25de2c
 8005014:	3f11566a 	.word	0x3f11566a
 8005018:	16bebd93 	.word	0x16bebd93
 800501c:	3f66c16c 	.word	0x3f66c16c
 8005020:	5555553e 	.word	0x5555553e
 8005024:	3fc55555 	.word	0x3fc55555
 8005028:	652b82fe 	.word	0x652b82fe
 800502c:	3ff71547 	.word	0x3ff71547
 8005030:	fee00000 	.word	0xfee00000
 8005034:	3fe62e42 	.word	0x3fe62e42
 8005038:	35793c76 	.word	0x35793c76
 800503c:	3dea39ef 	.word	0x3dea39ef
 8005040:	40862e41 	.word	0x40862e41
 8005044:	7fefffff 	.word	0x7fefffff
 8005048:	3ff0a2b1 	.word	0x3ff0a2b1
 800504c:	080050c0 	.word	0x080050c0
 8005050:	080050d0 	.word	0x080050d0
 8005054:	3ff00000 	.word	0x3ff00000
 8005058:	3fd62e42 	.word	0x3fd62e42
 800505c:	3e2fffff 	.word	0x3e2fffff
 8005060:	080050b0 	.word	0x080050b0

08005064 <finite>:
 8005064:	ee10 3a90 	vmov	r3, s1
 8005068:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800506c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005070:	0fc0      	lsrs	r0, r0, #31
 8005072:	4770      	bx	lr

08005074 <matherr>:
 8005074:	2000      	movs	r0, #0
 8005076:	4770      	bx	lr

08005078 <_init>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr

08005084 <_fini>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr
